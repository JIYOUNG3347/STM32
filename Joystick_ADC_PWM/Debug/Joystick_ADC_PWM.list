
Joystick_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08004c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004c68  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e551  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7b  00000000  00000000  0002e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00030370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182b5  00000000  00000000  00031d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e961  00000000  00000000  00049fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009affb  00000000  00000000  0005893e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  000f398c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b10 	.word	0x08004b10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b10 	.word	0x08004b10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
/**
 * @brief Retargets the C library printf function to the USART
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if (ch == '\n') HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b0a      	cmp	r3, #10
 8000590:	d106      	bne.n	80005a0 <__io_putchar+0x1c>
 8000592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000596:	2201      	movs	r2, #1
 8000598:	4907      	ldr	r1, [pc, #28]	; (80005b8 <__io_putchar+0x34>)
 800059a:	4808      	ldr	r0, [pc, #32]	; (80005bc <__io_putchar+0x38>)
 800059c:	f002 ff83 	bl	80034a6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <__io_putchar+0x38>)
 80005aa:	f002 ff7c 	bl	80034a6 <HAL_UART_Transmit>
	return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08004b28 	.word	0x08004b28
 80005bc:	2000011c 	.word	0x2000011c

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fc35 	bl	8000e34 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t JoyStick_XY[2] = {0,};
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f83d 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f9a9 	bl	8000928 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d6:	f000 f8a3 	bl	8000720 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005da:	f000 f905 	bl	80007e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f979 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // PWM Start
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <main+0x80>)
 80005e6:	f002 f84f 	bl	8002688 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// ADC regular channel -> Joystick X value
		HAL_ADC_Start(&hadc1);
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <main+0x84>)
 80005ec:	f000 fcfc 	bl	8000fe8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0x84>)
 80005f6:	f000 fdab 	bl	8001150 <HAL_ADC_PollForConversion>
		JoyStick_XY[0] = HAL_ADC_GetValue(&hadc1);
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <main+0x84>)
 80005fc:	f000 fe33 	bl	8001266 <HAL_ADC_GetValue>
 8000600:	4603      	mov	r3, r0
 8000602:	b29b      	uxth	r3, r3
 8000604:	80bb      	strh	r3, [r7, #4]

		// ADC regular channel -> Joystick Y value
		HAL_ADC_Start(&hadc1);
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0x84>)
 8000608:	f000 fcee 	bl	8000fe8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800060c:	f04f 31ff 	mov.w	r1, #4294967295
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <main+0x84>)
 8000612:	f000 fd9d 	bl	8001150 <HAL_ADC_PollForConversion>
		JoyStick_XY[1] = HAL_ADC_GetValue(&hadc1);
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x84>)
 8000618:	f000 fe25 	bl	8001266 <HAL_ADC_GetValue>
 800061c:	4603      	mov	r3, r0
 800061e:	b29b      	uxth	r3, r3
 8000620:	80fb      	strh	r3, [r7, #6]

		// Joystick X value -> Motor PWM control
		TIM2->CCR1 = JoyStick_XY[0];
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000628:	635a      	str	r2, [r3, #52]	; 0x34

		// print value
		printf("%d, %d\r\n", JoyStick_XY[0], JoyStick_XY[1]);
 800062a:	88bb      	ldrh	r3, [r7, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	461a      	mov	r2, r3
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <main+0x88>)
 8000634:	f003 fade 	bl	8003bf4 <iprintf>
		HAL_Delay(10);
 8000638:	200a      	movs	r0, #10
 800063a:	f000 fc6d 	bl	8000f18 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 800063e:	e7d4      	b.n	80005ea <main+0x2a>
 8000640:	200000d4 	.word	0x200000d4
 8000644:	2000008c 	.word	0x2000008c
 8000648:	08004b2c 	.word	0x08004b2c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fac2 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fa98 	bl	8001c08 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006de:	f000 f97d 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fcfa 	bl	80020f8 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070a:	f000 f967 	bl	80009dc <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000734:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_ADC1_Init+0xbc>)
 800073a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000748:	2201      	movs	r2, #1
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_ADC1_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000754:	2201      	movs	r2, #1
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ADC1_Init+0xbc>)
 800075c:	2201      	movs	r2, #1
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000768:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MX_ADC1_Init+0xc4>)
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ADC1_Init+0xbc>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000774:	2202      	movs	r2, #2
 8000776:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000782:	2201      	movs	r2, #1
 8000784:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	4815      	ldr	r0, [pc, #84]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000788:	f000 fbea 	bl	8000f60 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000792:	f000 f923 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000796:	2306      	movs	r3, #6
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800079e:	2306      	movs	r3, #6
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_ADC1_Init+0xbc>)
 80007a8:	f000 fd6a 	bl	8001280 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007b2:	f000 f913 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_ADC1_Init+0xbc>)
 80007c4:	f000 fd5c 	bl	8001280 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007ce:	f000 f905 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	40012000 	.word	0x40012000
 80007e4:	0f000001 	.word	0x0f000001

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800082e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000832:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000840:	4823      	ldr	r0, [pc, #140]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000842:	f001 fe79 	bl	8002538 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800084c:	f000 f8c6 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	4619      	mov	r1, r3
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800085e:	f002 f98d 	bl	8002b7c <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000868:	f000 f8b8 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800086c:	4818      	ldr	r0, [pc, #96]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800086e:	f001 feb2 	bl	80025d6 <HAL_TIM_PWM_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000878:	f000 f8b0 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800088c:	f002 fd3c 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000896:	f000 f8a1 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM2_Init+0xe8>)
 80008b2:	f002 f8a1 	bl	80029f8 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008bc:	f000 f88e 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM2_Init+0xe8>)
 80008c2:	f000 f923 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	; 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000d4 	.word	0x200000d4

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f002 fd7e 	bl	800340c <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f861 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000011c 	.word	0x2000011c
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_GPIO_Init+0xac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_GPIO_Init+0xac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <MX_GPIO_Init+0xac>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_GPIO_Init+0xac>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xb0>)
 80009c6:	f000 ff9b 	bl	8001900 <HAL_GPIO_Init>

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 ff28 	bl	800187c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x7c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d127      	bne.n	8000aaa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a92:	23c0      	movs	r3, #192	; 0xc0
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_ADC_MspInit+0x84>)
 8000aa6:	f000 ff2b 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d115      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	201c      	movs	r0, #28
 8000af4:	f000 fecd 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af8:	201c      	movs	r0, #28
 8000afa:	f000 fee6 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2c:	d11d      	bne.n	8000b6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4619      	mov	r1, r3
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <HAL_TIM_MspPostInit+0x6c>)
 8000b66:	f000 fecb 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12b      	bne.n	8000bf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be6:	2307      	movs	r3, #7
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bf2:	f000 fe85 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f93e 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM2_IRQHandler+0x10>)
 8000c66:	f001 fdbf 	bl	80027e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000d4 	.word	0x200000d4

08000c74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c86:	f3af 8000 	nop.w
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
	}

return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc5b 	bl	8000584 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf1      	blt.n	8000cc0 <_write+0x12>
	}
	return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_close>:

int _close(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_isatty>:

int _isatty(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return 1;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f002 ff06 	bl	8003b90 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000160 	.word	0x20000160
 8000db8:	20000178 	.word	0x20000178

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fec5 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fbd5 	bl	80005c0 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e24:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8000e28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e2c:	20000178 	.word	0x20000178

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 fd0d 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fdbe 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fd25 	bl	80018e6 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 fced 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000164 	.word	0x20000164

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000164 	.word	0x20000164

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e033      	b.n	8000fde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fd5a 	bl	8000a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	f043 0202 	orr.w	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fa96 	bl	80014e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fce:	e001      	b.n	8000fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_Start+0x1a>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e097      	b.n	8001132 <HAL_ADC_Start+0x14a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d018      	beq.n	800104a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HAL_ADC_Start+0x158>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a45      	ldr	r2, [pc, #276]	; (8001144 <HAL_ADC_Start+0x15c>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9a      	lsrs	r2, r3, #18
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800103c:	e002      	b.n	8001044 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3b01      	subs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	d15f      	bne.n	8001118 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001082:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001096:	d106      	bne.n	80010a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f023 0206 	bic.w	r2, r3, #6
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
 80010a4:	e002      	b.n	80010ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_ADC_Start+0x160>)
 80010b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10f      	bne.n	80010ee <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d129      	bne.n	8001130 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	e020      	b.n	8001130 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_ADC_Start+0x164>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d11b      	bne.n	8001130 <HAL_ADC_Start+0x148>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d114      	bne.n	8001130 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	e00b      	b.n	8001130 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f043 0210 	orr.w	r2, r3, #16
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83
 8001148:	40012300 	.word	0x40012300
 800114c:	40012000 	.word	0x40012000

08001150 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116c:	d113      	bne.n	8001196 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800117c:	d10b      	bne.n	8001196 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f043 0220 	orr.w	r2, r3, #32
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e063      	b.n	800125e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001196:	f7ff feb3 	bl	8000f00 <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800119c:	e021      	b.n	80011e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d01d      	beq.n	80011e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_ADC_PollForConversion+0x6c>
 80011ac:	f7ff fea8 	bl	8000f00 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d212      	bcs.n	80011e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d00b      	beq.n	80011e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f043 0204 	orr.w	r2, r3, #4
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e03d      	b.n	800125e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d1d6      	bne.n	800119e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0212 	mvn.w	r2, #18
 80011f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d123      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001218:	2b00      	cmp	r3, #0
 800121a:	d11f      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1c>
 8001298:	2302      	movs	r3, #2
 800129a:	e113      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x244>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d925      	bls.n	80012f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d9      	ldr	r1, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43da      	mvns	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4403      	add	r3, r0
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	409a      	lsls	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e022      	b.n	800133e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	2207      	movs	r2, #7
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	400a      	ands	r2, r1
 800131a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	4603      	mov	r3, r0
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4403      	add	r3, r0
 8001334:	409a      	lsls	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d824      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b05      	subs	r3, #5
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b05      	subs	r3, #5
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	e04c      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d824      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b23      	subs	r3, #35	; 0x23
 80013aa:	221f      	movs	r2, #31
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b23      	subs	r3, #35	; 0x23
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
 80013e0:	e023      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b41      	subs	r3, #65	; 0x41
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b41      	subs	r3, #65	; 0x41
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_ADC_ConfigChannel+0x250>)
 800142c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <HAL_ADC_ConfigChannel+0x254>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d10f      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d8>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d10b      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_ADC_ConfigChannel+0x254>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x23a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <HAL_ADC_ConfigChannel+0x258>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_ADC_ConfigChannel+0x1f4>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b11      	cmp	r3, #17
 8001472:	d122      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_ADC_ConfigChannel+0x258>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d111      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_ADC_ConfigChannel+0x25c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_ADC_ConfigChannel+0x260>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	0c9a      	lsrs	r2, r3, #18
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40012300 	.word	0x40012300
 80014d4:	40012000 	.word	0x40012000
 80014d8:	10000012 	.word	0x10000012
 80014dc:	20000000 	.word	0x20000000
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ec:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <ADC_Init+0x1f0>)
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	431a      	orrs	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800153c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800155e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6899      	ldr	r1, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <ADC_Init+0x1f4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d022      	beq.n	80015c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800158a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6899      	ldr	r1, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e00f      	b.n	80015e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0202 	bic.w	r2, r2, #2
 80015f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e1b      	ldrb	r3, [r3, #24]
 80015fc:	005a      	lsls	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800161e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800162e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6859      	ldr	r1, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	3b01      	subs	r3, #1
 800163c:	035a      	lsls	r2, r3, #13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	e007      	b.n	8001658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	051a      	lsls	r2, r3, #20
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800168c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800169a:	025a      	lsls	r2, r3, #9
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	029a      	lsls	r2, r3, #10
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	0f000001 	.word	0x0f000001

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e159      	b.n	8001bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8148 	bne.w	8001bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	2b02      	cmp	r3, #2
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a2 	beq.w	8001bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a56      	ldr	r2, [pc, #344]	; (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa2:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_GPIO_Init+0x2ec>)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x2f0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x202>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2f4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x1fe>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_GPIO_Init+0x2f8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x1fa>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_GPIO_Init+0x2fc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x1f6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	; (8001c00 <HAL_GPIO_Init+0x300>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x1f2>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x2ec>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f aea2 	bls.w	800191c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e267      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d00c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e242      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6f      	ldr	r2, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6c      	ldr	r2, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4b69      	ldr	r3, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a68      	ldr	r2, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f91e 	bl	8000f00 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f91a 	bl	8000f00 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e207      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f90a 	bl	8000f00 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f906 	bl	8000f00 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1f3      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c7      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4937      	ldr	r1, [pc, #220]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f8bf 	bl	8000f00 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff f8bb 	bl	8000f00 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a8      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4925      	ldr	r1, [pc, #148]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f89e 	bl	8000f00 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f89a 	bl	8000f00 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e187      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f87e 	bl	8000f00 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f87a 	bl	8000f00 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e167      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f867 	bl	8000f00 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e00e      	b.n	8001e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f863 	bl	8000f00 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d907      	bls.n	8001e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e150      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ea      	bne.n	8001e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8097 	beq.w	8001f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b7d      	ldr	r3, [pc, #500]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a7c      	ldr	r2, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b77      	ldr	r3, [pc, #476]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b74      	ldr	r3, [pc, #464]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a73      	ldr	r2, [pc, #460]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f823 	bl	8000f00 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff f81f 	bl	8000f00 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e10c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2ea>
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x30c>
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	4a54      	ldr	r2, [pc, #336]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f023 0304 	bic.w	r3, r3, #4
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe ffe4 	bl	8000f00 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ffe0 	bl	8000f00 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0cb      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ee      	beq.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7fe ffce 	bl	8000f00 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe ffca 	bl	8000f00 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0b5      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ee      	bne.n	8001f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a38      	ldr	r2, [pc, #224]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a1 	beq.w	80020e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d05c      	beq.n	800206c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d141      	bne.n	800203e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff9e 	bl	8000f00 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff9a 	bl	8000f00 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e087      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7fe ff73 	bl	8000f00 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ff6f 	bl	8000f00 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e05c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x416>
 800203c:	e054      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe ff5c 	bl	8000f00 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ff58 	bl	8000f00 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e045      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
 800206a:	e03d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e038      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d028      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d121      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0cc      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d90c      	bls.n	8002134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d044      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d119      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e067      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fe8a 	bl	8000f00 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7fe fe86 	bl	8000f00 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490a      	ldr	r1, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fdea 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08004b38 	.word	0x08004b38
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b094      	sub	sp, #80	; 0x50
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	647b      	str	r3, [r7, #68]	; 0x44
 80022d0:	2300      	movs	r3, #0
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	2300      	movs	r3, #0
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b79      	ldr	r3, [pc, #484]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	f200 80e1 	bhi.w	80024b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e0db      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022fc:	e0db      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002302:	e0d8      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230e:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
 8002324:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
 8002332:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002348:	0150      	lsls	r0, r2, #5
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4621      	mov	r1, r4
 8002350:	1a51      	subs	r1, r2, r1
 8002352:	6139      	str	r1, [r7, #16]
 8002354:	4629      	mov	r1, r5
 8002356:	eb63 0301 	sbc.w	r3, r3, r1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002368:	4659      	mov	r1, fp
 800236a:	018b      	lsls	r3, r1, #6
 800236c:	4651      	mov	r1, sl
 800236e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002372:	4651      	mov	r1, sl
 8002374:	018a      	lsls	r2, r1, #6
 8002376:	4651      	mov	r1, sl
 8002378:	ebb2 0801 	subs.w	r8, r2, r1
 800237c:	4659      	mov	r1, fp
 800237e:	eb63 0901 	sbc.w	r9, r3, r1
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	4623      	mov	r3, r4
 800239c:	eb18 0303 	adds.w	r3, r8, r3
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	462b      	mov	r3, r5
 80023a4:	eb49 0303 	adc.w	r3, r9, r3
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b6:	4629      	mov	r1, r5
 80023b8:	024b      	lsls	r3, r1, #9
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023c0:	4621      	mov	r1, r4
 80023c2:	024a      	lsls	r2, r1, #9
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	2200      	movs	r2, #0
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d4:	f7fd ff54 	bl	8000280 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e0:	e058      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	2200      	movs	r2, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	4611      	mov	r1, r2
 80023ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023fc:	4642      	mov	r2, r8
 80023fe:	464b      	mov	r3, r9
 8002400:	f04f 0000 	mov.w	r0, #0
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	0159      	lsls	r1, r3, #5
 800240a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240e:	0150      	lsls	r0, r2, #5
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4641      	mov	r1, r8
 8002416:	ebb2 0a01 	subs.w	sl, r2, r1
 800241a:	4649      	mov	r1, r9
 800241c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800242c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002430:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002434:	ebb2 040a 	subs.w	r4, r2, sl
 8002438:	eb63 050b 	sbc.w	r5, r3, fp
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	00eb      	lsls	r3, r5, #3
 8002446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800244a:	00e2      	lsls	r2, r4, #3
 800244c:	4614      	mov	r4, r2
 800244e:	461d      	mov	r5, r3
 8002450:	4643      	mov	r3, r8
 8002452:	18e3      	adds	r3, r4, r3
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	464b      	mov	r3, r9
 8002458:	eb45 0303 	adc.w	r3, r5, r3
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800246a:	4629      	mov	r1, r5
 800246c:	028b      	lsls	r3, r1, #10
 800246e:	4621      	mov	r1, r4
 8002470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002474:	4621      	mov	r1, r4
 8002476:	028a      	lsls	r2, r1, #10
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247e:	2200      	movs	r2, #0
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	61fa      	str	r2, [r7, #28]
 8002484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002488:	f7fd fefa 	bl	8000280 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4613      	mov	r3, r2
 8002492:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3750      	adds	r7, #80	; 0x50
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	007a1200 	.word	0x007a1200

080024d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08004b48 	.word	0x08004b48

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffdc 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0b5b      	lsrs	r3, r3, #13
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	08004b48 	.word	0x08004b48

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe faae 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fbfa 	bl	8002d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e041      	b.n	800266c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d106      	bne.n	8002602 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f839 	bl	8002674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 fbab 	bl	8002d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x24>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x3e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x58>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e068      	b.n	80027cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0x82>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	e013      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0x92>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002718:	e00b      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xa2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	e003      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fdbe 	bl	80032bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_TIM_PWM_Start+0x14c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d107      	bne.n	800275a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_PWM_Start+0x14c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d018      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d013      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_TIM_PWM_Start+0x150>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_TIM_PWM_Start+0x154>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_TIM_PWM_Start+0x158>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <HAL_TIM_PWM_Start+0x15c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40014000 	.word	0x40014000

080027e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d122      	bne.n	8002844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b02      	cmp	r3, #2
 800280a:	d11b      	bne.n	8002844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0202 	mvn.w	r2, #2
 8002814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa81 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa73 	bl	8002d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa84 	bl	8002d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b04      	cmp	r3, #4
 8002850:	d122      	bne.n	8002898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d11b      	bne.n	8002898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0204 	mvn.w	r2, #4
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa57 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa49 	bl	8002d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa5a 	bl	8002d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d122      	bne.n	80028ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d11b      	bne.n	80028ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0208 	mvn.w	r2, #8
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa2d 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa1f 	bl	8002d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fa30 	bl	8002d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0210 	mvn.w	r2, #16
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2208      	movs	r2, #8
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa03 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9f5 	bl	8002d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa06 	bl	8002d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0201 	mvn.w	r2, #1
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9cf 	bl	8002d0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	2b80      	cmp	r3, #128	; 0x80
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d107      	bne.n	8002998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fd30 	bl	80033f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d107      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9cb 	bl	8002d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d107      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0220 	mvn.w	r2, #32
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fcfa 	bl	80033e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0ae      	b.n	8002b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	f200 809f 	bhi.w	8002b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002b65 	.word	0x08002b65
 8002a34:	08002b65 	.word	0x08002b65
 8002a38:	08002b65 	.word	0x08002b65
 8002a3c:	08002aa1 	.word	0x08002aa1
 8002a40:	08002b65 	.word	0x08002b65
 8002a44:	08002b65 	.word	0x08002b65
 8002a48:	08002b65 	.word	0x08002b65
 8002a4c:	08002ae3 	.word	0x08002ae3
 8002a50:	08002b65 	.word	0x08002b65
 8002a54:	08002b65 	.word	0x08002b65
 8002a58:	08002b65 	.word	0x08002b65
 8002a5c:	08002b23 	.word	0x08002b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa02 	bl	8002e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e064      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa48 	bl	8002f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e043      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fa93 	bl	8003014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e023      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fadd 	bl	80030e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
      break;
 8002b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_ConfigClockSource+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0b4      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x186>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d03e      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0xd4>
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	f200 8087 	bhi.w	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	f000 8086 	beq.w	8002cee <HAL_TIM_ConfigClockSource+0x172>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d87f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b70      	cmp	r3, #112	; 0x70
 8002bea:	d01a      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0xa6>
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d87b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b60      	cmp	r3, #96	; 0x60
 8002bf2:	d050      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x11a>
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d877      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b50      	cmp	r3, #80	; 0x50
 8002bfa:	d03c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xfa>
 8002bfc:	2b50      	cmp	r3, #80	; 0x50
 8002bfe:	d873      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d058      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d86f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b30      	cmp	r3, #48	; 0x30
 8002c0a:	d064      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d86b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d060      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d867      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d05a      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	e062      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f000 fb23 	bl	800327c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
      break;
 8002c4e:	e04f      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f000 fb0c 	bl	800327c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	609a      	str	r2, [r3, #8]
      break;
 8002c74:	e03c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fa80 	bl	8003188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2150      	movs	r1, #80	; 0x50
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fad9 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e02c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fa9f 	bl	80031e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2160      	movs	r1, #96	; 0x60
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fac9 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e01c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f000 fa60 	bl	8003188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fab9 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e00c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 fab0 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <TIM_Base_SetConfig+0xe4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00f      	beq.n	8002da8 <TIM_Base_SetConfig+0x38>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d00b      	beq.n	8002da8 <TIM_Base_SetConfig+0x38>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a31      	ldr	r2, [pc, #196]	; (8002e58 <TIM_Base_SetConfig+0xe8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_Base_SetConfig+0x38>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <TIM_Base_SetConfig+0xec>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_Base_SetConfig+0x38>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <TIM_Base_SetConfig+0xf0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <TIM_Base_SetConfig+0xe4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01b      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d017      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <TIM_Base_SetConfig+0xe8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <TIM_Base_SetConfig+0xec>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00f      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <TIM_Base_SetConfig+0xf0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <TIM_Base_SetConfig+0xf4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <TIM_Base_SetConfig+0xf8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x8a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <TIM_Base_SetConfig+0xfc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <TIM_Base_SetConfig+0xe4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d103      	bne.n	8002e40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	615a      	str	r2, [r3, #20]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800

08002e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0302 	bic.w	r3, r3, #2
 8002eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <TIM_OC1_SetConfig+0xc8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d10c      	bne.n	8002ee6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0308 	bic.w	r3, r3, #8
 8002ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <TIM_OC1_SetConfig+0xc8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d111      	bne.n	8002f12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	621a      	str	r2, [r3, #32]
}
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40010000 	.word	0x40010000

08002f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0210 	bic.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0320 	bic.w	r3, r3, #32
 8002f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <TIM_OC2_SetConfig+0xd4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10d      	bne.n	8002fb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a15      	ldr	r2, [pc, #84]	; (8003010 <TIM_OC2_SetConfig+0xd4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d113      	bne.n	8002fe8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000

08003014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800305c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <TIM_OC3_SetConfig+0xd0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10d      	bne.n	800308e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800308c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <TIM_OC3_SetConfig+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d113      	bne.n	80030be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800309c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40010000 	.word	0x40010000

080030e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <TIM_OC4_SetConfig+0x9c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d109      	bne.n	800315c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800314e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	019b      	lsls	r3, r3, #6
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 030a 	bic.w	r3, r3, #10
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0210 	bic.w	r2, r3, #16
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1a      	ldr	r2, [r3, #32]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e050      	b.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336c:	d013      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10c      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	40014000 	.word	0x40014000

080033e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e03f      	b.n	800349e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fba2 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f929 	bl	80036a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d17c      	bne.n	80035c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Transmit+0x2c>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e075      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x3e>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e06e      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	; 0x21
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fd fd01 	bl	8000f00 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003514:	d108      	bne.n	8003528 <HAL_UART_Transmit+0x82>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003538:	e02a      	b.n	8003590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f840 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cf      	bne.n	800353a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f810 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b090      	sub	sp, #64	; 0x40
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	e050      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d04c      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x30>
 80035ea:	f7fd fc89 	bl	8000f00 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d241      	bcs.n	800367e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800361a:	637a      	str	r2, [r7, #52]	; 0x34
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e5      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364e:	623a      	str	r2, [r7, #32]
 8003650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	69f9      	ldr	r1, [r7, #28]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	61bb      	str	r3, [r7, #24]
   return(result);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e00f      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	429a      	cmp	r2, r3
 800369a:	d09f      	beq.n	80035dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3740      	adds	r7, #64	; 0x40
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b0c0      	sub	sp, #256	; 0x100
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	ea40 0301 	orr.w	r3, r0, r1
 80036d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003700:	f021 010c 	bic.w	r1, r1, #12
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800370e:	430b      	orrs	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	6999      	ldr	r1, [r3, #24]
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	ea40 0301 	orr.w	r3, r0, r1
 800372e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b8f      	ldr	r3, [pc, #572]	; (8003974 <UART_SetConfig+0x2cc>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d005      	beq.n	8003748 <UART_SetConfig+0xa0>
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <UART_SetConfig+0x2d0>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7fe fee2 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 800374c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003750:	e003      	b.n	800375a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003752:	f7fe fec9 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003756:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003764:	f040 810c 	bne.w	8003980 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003772:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003776:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800377a:	4622      	mov	r2, r4
 800377c:	462b      	mov	r3, r5
 800377e:	1891      	adds	r1, r2, r2
 8003780:	65b9      	str	r1, [r7, #88]	; 0x58
 8003782:	415b      	adcs	r3, r3
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800378a:	4621      	mov	r1, r4
 800378c:	eb12 0801 	adds.w	r8, r2, r1
 8003790:	4629      	mov	r1, r5
 8003792:	eb43 0901 	adc.w	r9, r3, r1
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037aa:	4690      	mov	r8, r2
 80037ac:	4699      	mov	r9, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	eb18 0303 	adds.w	r3, r8, r3
 80037b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037b8:	462b      	mov	r3, r5
 80037ba:	eb49 0303 	adc.w	r3, r9, r3
 80037be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037d6:	460b      	mov	r3, r1
 80037d8:	18db      	adds	r3, r3, r3
 80037da:	653b      	str	r3, [r7, #80]	; 0x50
 80037dc:	4613      	mov	r3, r2
 80037de:	eb42 0303 	adc.w	r3, r2, r3
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
 80037e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037ec:	f7fc fd48 	bl	8000280 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <UART_SetConfig+0x2d4>)
 80037f6:	fba3 2302 	umull	r2, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	011c      	lsls	r4, r3, #4
 80037fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003808:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800380c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	64b9      	str	r1, [r7, #72]	; 0x48
 8003818:	415b      	adcs	r3, r3
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003820:	4641      	mov	r1, r8
 8003822:	eb12 0a01 	adds.w	sl, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0b01 	adc.w	fp, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003838:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800383c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003840:	4692      	mov	sl, r2
 8003842:	469b      	mov	fp, r3
 8003844:	4643      	mov	r3, r8
 8003846:	eb1a 0303 	adds.w	r3, sl, r3
 800384a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800384e:	464b      	mov	r3, r9
 8003850:	eb4b 0303 	adc.w	r3, fp, r3
 8003854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003864:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800386c:	460b      	mov	r3, r1
 800386e:	18db      	adds	r3, r3, r3
 8003870:	643b      	str	r3, [r7, #64]	; 0x40
 8003872:	4613      	mov	r3, r2
 8003874:	eb42 0303 	adc.w	r3, r2, r3
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
 800387a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800387e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003882:	f7fc fcfd 	bl	8000280 <__aeabi_uldivmod>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4611      	mov	r1, r2
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <UART_SetConfig+0x2d4>)
 800388e:	fba3 2301 	umull	r2, r3, r3, r1
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2264      	movs	r2, #100	; 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <UART_SetConfig+0x2d4>)
 80038a4:	fba3 2302 	umull	r2, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038b0:	441c      	add	r4, r3
 80038b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	1891      	adds	r1, r2, r2
 80038ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80038cc:	415b      	adcs	r3, r3
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038d4:	4641      	mov	r1, r8
 80038d6:	1851      	adds	r1, r2, r1
 80038d8:	6339      	str	r1, [r7, #48]	; 0x30
 80038da:	4649      	mov	r1, r9
 80038dc:	414b      	adcs	r3, r1
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038ec:	4659      	mov	r1, fp
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4651      	mov	r1, sl
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4642      	mov	r2, r8
 8003902:	189b      	adds	r3, r3, r2
 8003904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003908:	464b      	mov	r3, r9
 800390a:	460a      	mov	r2, r1
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003920:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003928:	460b      	mov	r3, r1
 800392a:	18db      	adds	r3, r3, r3
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
 800392e:	4613      	mov	r3, r2
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800393a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800393e:	f7fc fc9f 	bl	8000280 <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <UART_SetConfig+0x2d4>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	; 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <UART_SetConfig+0x2d4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 0207 	and.w	r2, r3, #7
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4422      	add	r2, r4
 800396e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003970:	e105      	b.n	8003b7e <UART_SetConfig+0x4d6>
 8003972:	bf00      	nop
 8003974:	40011000 	.word	0x40011000
 8003978:	40011400 	.word	0x40011400
 800397c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800398a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800398e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003992:	4642      	mov	r2, r8
 8003994:	464b      	mov	r3, r9
 8003996:	1891      	adds	r1, r2, r2
 8003998:	6239      	str	r1, [r7, #32]
 800399a:	415b      	adcs	r3, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a2:	4641      	mov	r1, r8
 80039a4:	1854      	adds	r4, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb43 0501 	adc.w	r5, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	00eb      	lsls	r3, r5, #3
 80039b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ba:	00e2      	lsls	r2, r4, #3
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	18e3      	adds	r3, r4, r3
 80039c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c8:	464b      	mov	r3, r9
 80039ca:	eb45 0303 	adc.w	r3, r5, r3
 80039ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ee:	4629      	mov	r1, r5
 80039f0:	008b      	lsls	r3, r1, #2
 80039f2:	4621      	mov	r1, r4
 80039f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f8:	4621      	mov	r1, r4
 80039fa:	008a      	lsls	r2, r1, #2
 80039fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a00:	f7fc fc3e 	bl	8000280 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b60      	ldr	r3, [pc, #384]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	011c      	lsls	r4, r3, #4
 8003a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	61b9      	str	r1, [r7, #24]
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a34:	4641      	mov	r1, r8
 8003a36:	1851      	adds	r1, r2, r1
 8003a38:	6139      	str	r1, [r7, #16]
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	414b      	adcs	r3, r1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	00cb      	lsls	r3, r1, #3
 8003a50:	4651      	mov	r1, sl
 8003a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a56:	4651      	mov	r1, sl
 8003a58:	00ca      	lsls	r2, r1, #3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4642      	mov	r2, r8
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a68:	464b      	mov	r3, r9
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	008b      	lsls	r3, r1, #2
 8003a90:	4641      	mov	r1, r8
 8003a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a96:	4641      	mov	r1, r8
 8003a98:	008a      	lsls	r2, r1, #2
 8003a9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a9e:	f7fc fbef 	bl	8000280 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	2164      	movs	r1, #100	; 0x64
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	3332      	adds	r3, #50	; 0x32
 8003aba:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac6:	441c      	add	r4, r3
 8003ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003acc:	2200      	movs	r2, #0
 8003ace:	673b      	str	r3, [r7, #112]	; 0x70
 8003ad0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ad2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	464b      	mov	r3, r9
 8003ada:	1891      	adds	r1, r2, r2
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	415b      	adcs	r3, r3
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	1851      	adds	r1, r2, r1
 8003aea:	6039      	str	r1, [r7, #0]
 8003aec:	4649      	mov	r1, r9
 8003aee:	414b      	adcs	r3, r1
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003afe:	4659      	mov	r1, fp
 8003b00:	00cb      	lsls	r3, r1, #3
 8003b02:	4651      	mov	r1, sl
 8003b04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b08:	4651      	mov	r1, sl
 8003b0a:	00ca      	lsls	r2, r1, #3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4603      	mov	r3, r0
 8003b12:	4642      	mov	r2, r8
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b18:	464b      	mov	r3, r9
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	008b      	lsls	r3, r1, #2
 8003b3e:	4641      	mov	r1, r8
 8003b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b44:	4641      	mov	r1, r8
 8003b46:	008a      	lsls	r2, r1, #2
 8003b48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b4c:	f7fc fb98 	bl	8000280 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003b56:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2164      	movs	r1, #100	; 0x64
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	; 0x32
 8003b68:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4422      	add	r2, r4
 8003b7c:	609a      	str	r2, [r3, #8]
}
 8003b7e:	bf00      	nop
 8003b80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	51eb851f 	.word	0x51eb851f

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2000000c 	.word	0x2000000c

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	; (8003bd4 <__libc_init_array+0x38>)
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <__libc_init_array+0x3c>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	4d0b      	ldr	r5, [pc, #44]	; (8003bdc <__libc_init_array+0x40>)
 8003bae:	4c0c      	ldr	r4, [pc, #48]	; (8003be0 <__libc_init_array+0x44>)
 8003bb0:	f000 ffae 	bl	8004b10 <_init>
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	2600      	movs	r6, #0
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	08004bf0 	.word	0x08004bf0
 8003bd8:	08004bf0 	.word	0x08004bf0
 8003bdc:	08004bf0 	.word	0x08004bf0
 8003be0:	08004bf4 	.word	0x08004bf4

08003be4 <memset>:
 8003be4:	4402      	add	r2, r0
 8003be6:	4603      	mov	r3, r0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <iprintf>:
 8003bf4:	b40f      	push	{r0, r1, r2, r3}
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <iprintf+0x2c>)
 8003bf8:	b513      	push	{r0, r1, r4, lr}
 8003bfa:	681c      	ldr	r4, [r3, #0]
 8003bfc:	b124      	cbz	r4, 8003c08 <iprintf+0x14>
 8003bfe:	69a3      	ldr	r3, [r4, #24]
 8003c00:	b913      	cbnz	r3, 8003c08 <iprintf+0x14>
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 f866 	bl	8003cd4 <__sinit>
 8003c08:	ab05      	add	r3, sp, #20
 8003c0a:	9a04      	ldr	r2, [sp, #16]
 8003c0c:	68a1      	ldr	r1, [r4, #8]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	4620      	mov	r0, r4
 8003c12:	f000 f9bd 	bl	8003f90 <_vfiprintf_r>
 8003c16:	b002      	add	sp, #8
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	b004      	add	sp, #16
 8003c1e:	4770      	bx	lr
 8003c20:	2000000c 	.word	0x2000000c

08003c24 <std>:
 8003c24:	2300      	movs	r3, #0
 8003c26:	b510      	push	{r4, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c32:	6083      	str	r3, [r0, #8]
 8003c34:	8181      	strh	r1, [r0, #12]
 8003c36:	6643      	str	r3, [r0, #100]	; 0x64
 8003c38:	81c2      	strh	r2, [r0, #14]
 8003c3a:	6183      	str	r3, [r0, #24]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2208      	movs	r2, #8
 8003c40:	305c      	adds	r0, #92	; 0x5c
 8003c42:	f7ff ffcf 	bl	8003be4 <memset>
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <std+0x38>)
 8003c48:	6263      	str	r3, [r4, #36]	; 0x24
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <std+0x3c>)
 8003c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <std+0x40>)
 8003c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <std+0x44>)
 8003c54:	6224      	str	r4, [r4, #32]
 8003c56:	6323      	str	r3, [r4, #48]	; 0x30
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08004539 	.word	0x08004539
 8003c60:	0800455b 	.word	0x0800455b
 8003c64:	08004593 	.word	0x08004593
 8003c68:	080045b7 	.word	0x080045b7

08003c6c <_cleanup_r>:
 8003c6c:	4901      	ldr	r1, [pc, #4]	; (8003c74 <_cleanup_r+0x8>)
 8003c6e:	f000 b8af 	b.w	8003dd0 <_fwalk_reent>
 8003c72:	bf00      	nop
 8003c74:	08004891 	.word	0x08004891

08003c78 <__sfmoreglue>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	2268      	movs	r2, #104	; 0x68
 8003c7c:	1e4d      	subs	r5, r1, #1
 8003c7e:	4355      	muls	r5, r2
 8003c80:	460e      	mov	r6, r1
 8003c82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c86:	f000 f8e5 	bl	8003e54 <_malloc_r>
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	b140      	cbz	r0, 8003ca0 <__sfmoreglue+0x28>
 8003c8e:	2100      	movs	r1, #0
 8003c90:	e9c0 1600 	strd	r1, r6, [r0]
 8003c94:	300c      	adds	r0, #12
 8003c96:	60a0      	str	r0, [r4, #8]
 8003c98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c9c:	f7ff ffa2 	bl	8003be4 <memset>
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}

08003ca4 <__sfp_lock_acquire>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__sfp_lock_acquire+0x8>)
 8003ca6:	f000 b8b3 	b.w	8003e10 <__retarget_lock_acquire_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000169 	.word	0x20000169

08003cb0 <__sfp_lock_release>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__sfp_lock_release+0x8>)
 8003cb2:	f000 b8ae 	b.w	8003e12 <__retarget_lock_release_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000169 	.word	0x20000169

08003cbc <__sinit_lock_acquire>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__sinit_lock_acquire+0x8>)
 8003cbe:	f000 b8a7 	b.w	8003e10 <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	2000016a 	.word	0x2000016a

08003cc8 <__sinit_lock_release>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__sinit_lock_release+0x8>)
 8003cca:	f000 b8a2 	b.w	8003e12 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	2000016a 	.word	0x2000016a

08003cd4 <__sinit>:
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f7ff fff0 	bl	8003cbc <__sinit_lock_acquire>
 8003cdc:	69a3      	ldr	r3, [r4, #24]
 8003cde:	b11b      	cbz	r3, 8003ce8 <__sinit+0x14>
 8003ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce4:	f7ff bff0 	b.w	8003cc8 <__sinit_lock_release>
 8003ce8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003cec:	6523      	str	r3, [r4, #80]	; 0x50
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <__sinit+0x68>)
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <__sinit+0x6c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003cf6:	42a3      	cmp	r3, r4
 8003cf8:	bf04      	itt	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	61a3      	streq	r3, [r4, #24]
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f000 f820 	bl	8003d44 <__sfp>
 8003d04:	6060      	str	r0, [r4, #4]
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 f81c 	bl	8003d44 <__sfp>
 8003d0c:	60a0      	str	r0, [r4, #8]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f818 	bl	8003d44 <__sfp>
 8003d14:	2200      	movs	r2, #0
 8003d16:	60e0      	str	r0, [r4, #12]
 8003d18:	2104      	movs	r1, #4
 8003d1a:	6860      	ldr	r0, [r4, #4]
 8003d1c:	f7ff ff82 	bl	8003c24 <std>
 8003d20:	68a0      	ldr	r0, [r4, #8]
 8003d22:	2201      	movs	r2, #1
 8003d24:	2109      	movs	r1, #9
 8003d26:	f7ff ff7d 	bl	8003c24 <std>
 8003d2a:	68e0      	ldr	r0, [r4, #12]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	2112      	movs	r1, #18
 8003d30:	f7ff ff78 	bl	8003c24 <std>
 8003d34:	2301      	movs	r3, #1
 8003d36:	61a3      	str	r3, [r4, #24]
 8003d38:	e7d2      	b.n	8003ce0 <__sinit+0xc>
 8003d3a:	bf00      	nop
 8003d3c:	08004b50 	.word	0x08004b50
 8003d40:	08003c6d 	.word	0x08003c6d

08003d44 <__sfp>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	4607      	mov	r7, r0
 8003d48:	f7ff ffac 	bl	8003ca4 <__sfp_lock_acquire>
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <__sfp+0x84>)
 8003d4e:	681e      	ldr	r6, [r3, #0]
 8003d50:	69b3      	ldr	r3, [r6, #24]
 8003d52:	b913      	cbnz	r3, 8003d5a <__sfp+0x16>
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7ff ffbd 	bl	8003cd4 <__sinit>
 8003d5a:	3648      	adds	r6, #72	; 0x48
 8003d5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	d503      	bpl.n	8003d6c <__sfp+0x28>
 8003d64:	6833      	ldr	r3, [r6, #0]
 8003d66:	b30b      	cbz	r3, 8003dac <__sfp+0x68>
 8003d68:	6836      	ldr	r6, [r6, #0]
 8003d6a:	e7f7      	b.n	8003d5c <__sfp+0x18>
 8003d6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d70:	b9d5      	cbnz	r5, 8003da8 <__sfp+0x64>
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <__sfp+0x88>)
 8003d74:	60e3      	str	r3, [r4, #12]
 8003d76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d7a:	6665      	str	r5, [r4, #100]	; 0x64
 8003d7c:	f000 f847 	bl	8003e0e <__retarget_lock_init_recursive>
 8003d80:	f7ff ff96 	bl	8003cb0 <__sfp_lock_release>
 8003d84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d8c:	6025      	str	r5, [r4, #0]
 8003d8e:	61a5      	str	r5, [r4, #24]
 8003d90:	2208      	movs	r2, #8
 8003d92:	4629      	mov	r1, r5
 8003d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d98:	f7ff ff24 	bl	8003be4 <memset>
 8003d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003da4:	4620      	mov	r0, r4
 8003da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da8:	3468      	adds	r4, #104	; 0x68
 8003daa:	e7d9      	b.n	8003d60 <__sfp+0x1c>
 8003dac:	2104      	movs	r1, #4
 8003dae:	4638      	mov	r0, r7
 8003db0:	f7ff ff62 	bl	8003c78 <__sfmoreglue>
 8003db4:	4604      	mov	r4, r0
 8003db6:	6030      	str	r0, [r6, #0]
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d1d5      	bne.n	8003d68 <__sfp+0x24>
 8003dbc:	f7ff ff78 	bl	8003cb0 <__sfp_lock_release>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	e7ee      	b.n	8003da4 <__sfp+0x60>
 8003dc6:	bf00      	nop
 8003dc8:	08004b50 	.word	0x08004b50
 8003dcc:	ffff0001 	.word	0xffff0001

08003dd0 <_fwalk_reent>:
 8003dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	4688      	mov	r8, r1
 8003dd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ddc:	2700      	movs	r7, #0
 8003dde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003de2:	f1b9 0901 	subs.w	r9, r9, #1
 8003de6:	d505      	bpl.n	8003df4 <_fwalk_reent+0x24>
 8003de8:	6824      	ldr	r4, [r4, #0]
 8003dea:	2c00      	cmp	r4, #0
 8003dec:	d1f7      	bne.n	8003dde <_fwalk_reent+0xe>
 8003dee:	4638      	mov	r0, r7
 8003df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df4:	89ab      	ldrh	r3, [r5, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d907      	bls.n	8003e0a <_fwalk_reent+0x3a>
 8003dfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	d003      	beq.n	8003e0a <_fwalk_reent+0x3a>
 8003e02:	4629      	mov	r1, r5
 8003e04:	4630      	mov	r0, r6
 8003e06:	47c0      	blx	r8
 8003e08:	4307      	orrs	r7, r0
 8003e0a:	3568      	adds	r5, #104	; 0x68
 8003e0c:	e7e9      	b.n	8003de2 <_fwalk_reent+0x12>

08003e0e <__retarget_lock_init_recursive>:
 8003e0e:	4770      	bx	lr

08003e10 <__retarget_lock_acquire_recursive>:
 8003e10:	4770      	bx	lr

08003e12 <__retarget_lock_release_recursive>:
 8003e12:	4770      	bx	lr

08003e14 <sbrk_aligned>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4e0e      	ldr	r6, [pc, #56]	; (8003e50 <sbrk_aligned+0x3c>)
 8003e18:	460c      	mov	r4, r1
 8003e1a:	6831      	ldr	r1, [r6, #0]
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	b911      	cbnz	r1, 8003e26 <sbrk_aligned+0x12>
 8003e20:	f000 fb7a 	bl	8004518 <_sbrk_r>
 8003e24:	6030      	str	r0, [r6, #0]
 8003e26:	4621      	mov	r1, r4
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 fb75 	bl	8004518 <_sbrk_r>
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	d00a      	beq.n	8003e48 <sbrk_aligned+0x34>
 8003e32:	1cc4      	adds	r4, r0, #3
 8003e34:	f024 0403 	bic.w	r4, r4, #3
 8003e38:	42a0      	cmp	r0, r4
 8003e3a:	d007      	beq.n	8003e4c <sbrk_aligned+0x38>
 8003e3c:	1a21      	subs	r1, r4, r0
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 fb6a 	bl	8004518 <_sbrk_r>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d101      	bne.n	8003e4c <sbrk_aligned+0x38>
 8003e48:	f04f 34ff 	mov.w	r4, #4294967295
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	20000170 	.word	0x20000170

08003e54 <_malloc_r>:
 8003e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e58:	1ccd      	adds	r5, r1, #3
 8003e5a:	f025 0503 	bic.w	r5, r5, #3
 8003e5e:	3508      	adds	r5, #8
 8003e60:	2d0c      	cmp	r5, #12
 8003e62:	bf38      	it	cc
 8003e64:	250c      	movcc	r5, #12
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	4607      	mov	r7, r0
 8003e6a:	db01      	blt.n	8003e70 <_malloc_r+0x1c>
 8003e6c:	42a9      	cmp	r1, r5
 8003e6e:	d905      	bls.n	8003e7c <_malloc_r+0x28>
 8003e70:	230c      	movs	r3, #12
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	2600      	movs	r6, #0
 8003e76:	4630      	mov	r0, r6
 8003e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e7c:	4e2e      	ldr	r6, [pc, #184]	; (8003f38 <_malloc_r+0xe4>)
 8003e7e:	f000 fdbb 	bl	80049f8 <__malloc_lock>
 8003e82:	6833      	ldr	r3, [r6, #0]
 8003e84:	461c      	mov	r4, r3
 8003e86:	bb34      	cbnz	r4, 8003ed6 <_malloc_r+0x82>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ffc2 	bl	8003e14 <sbrk_aligned>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	4604      	mov	r4, r0
 8003e94:	d14d      	bne.n	8003f32 <_malloc_r+0xde>
 8003e96:	6834      	ldr	r4, [r6, #0]
 8003e98:	4626      	mov	r6, r4
 8003e9a:	2e00      	cmp	r6, #0
 8003e9c:	d140      	bne.n	8003f20 <_malloc_r+0xcc>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	eb04 0803 	add.w	r8, r4, r3
 8003ea8:	f000 fb36 	bl	8004518 <_sbrk_r>
 8003eac:	4580      	cmp	r8, r0
 8003eae:	d13a      	bne.n	8003f26 <_malloc_r+0xd2>
 8003eb0:	6821      	ldr	r1, [r4, #0]
 8003eb2:	3503      	adds	r5, #3
 8003eb4:	1a6d      	subs	r5, r5, r1
 8003eb6:	f025 0503 	bic.w	r5, r5, #3
 8003eba:	3508      	adds	r5, #8
 8003ebc:	2d0c      	cmp	r5, #12
 8003ebe:	bf38      	it	cc
 8003ec0:	250c      	movcc	r5, #12
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff ffa5 	bl	8003e14 <sbrk_aligned>
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d02b      	beq.n	8003f26 <_malloc_r+0xd2>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	442b      	add	r3, r5
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	e00e      	b.n	8003ef4 <_malloc_r+0xa0>
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	1b52      	subs	r2, r2, r5
 8003eda:	d41e      	bmi.n	8003f1a <_malloc_r+0xc6>
 8003edc:	2a0b      	cmp	r2, #11
 8003ede:	d916      	bls.n	8003f0e <_malloc_r+0xba>
 8003ee0:	1961      	adds	r1, r4, r5
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	6025      	str	r5, [r4, #0]
 8003ee6:	bf18      	it	ne
 8003ee8:	6059      	strne	r1, [r3, #4]
 8003eea:	6863      	ldr	r3, [r4, #4]
 8003eec:	bf08      	it	eq
 8003eee:	6031      	streq	r1, [r6, #0]
 8003ef0:	5162      	str	r2, [r4, r5]
 8003ef2:	604b      	str	r3, [r1, #4]
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f104 060b 	add.w	r6, r4, #11
 8003efa:	f000 fd83 	bl	8004a04 <__malloc_unlock>
 8003efe:	f026 0607 	bic.w	r6, r6, #7
 8003f02:	1d23      	adds	r3, r4, #4
 8003f04:	1af2      	subs	r2, r6, r3
 8003f06:	d0b6      	beq.n	8003e76 <_malloc_r+0x22>
 8003f08:	1b9b      	subs	r3, r3, r6
 8003f0a:	50a3      	str	r3, [r4, r2]
 8003f0c:	e7b3      	b.n	8003e76 <_malloc_r+0x22>
 8003f0e:	6862      	ldr	r2, [r4, #4]
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	bf0c      	ite	eq
 8003f14:	6032      	streq	r2, [r6, #0]
 8003f16:	605a      	strne	r2, [r3, #4]
 8003f18:	e7ec      	b.n	8003ef4 <_malloc_r+0xa0>
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	6864      	ldr	r4, [r4, #4]
 8003f1e:	e7b2      	b.n	8003e86 <_malloc_r+0x32>
 8003f20:	4634      	mov	r4, r6
 8003f22:	6876      	ldr	r6, [r6, #4]
 8003f24:	e7b9      	b.n	8003e9a <_malloc_r+0x46>
 8003f26:	230c      	movs	r3, #12
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f000 fd6a 	bl	8004a04 <__malloc_unlock>
 8003f30:	e7a1      	b.n	8003e76 <_malloc_r+0x22>
 8003f32:	6025      	str	r5, [r4, #0]
 8003f34:	e7de      	b.n	8003ef4 <_malloc_r+0xa0>
 8003f36:	bf00      	nop
 8003f38:	2000016c 	.word	0x2000016c

08003f3c <__sfputc_r>:
 8003f3c:	6893      	ldr	r3, [r2, #8]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	b410      	push	{r4}
 8003f44:	6093      	str	r3, [r2, #8]
 8003f46:	da08      	bge.n	8003f5a <__sfputc_r+0x1e>
 8003f48:	6994      	ldr	r4, [r2, #24]
 8003f4a:	42a3      	cmp	r3, r4
 8003f4c:	db01      	blt.n	8003f52 <__sfputc_r+0x16>
 8003f4e:	290a      	cmp	r1, #10
 8003f50:	d103      	bne.n	8003f5a <__sfputc_r+0x1e>
 8003f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f56:	f000 bb33 	b.w	80045c0 <__swbuf_r>
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	1c58      	adds	r0, r3, #1
 8003f5e:	6010      	str	r0, [r2, #0]
 8003f60:	7019      	strb	r1, [r3, #0]
 8003f62:	4608      	mov	r0, r1
 8003f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <__sfputs_r>:
 8003f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460f      	mov	r7, r1
 8003f70:	4614      	mov	r4, r2
 8003f72:	18d5      	adds	r5, r2, r3
 8003f74:	42ac      	cmp	r4, r5
 8003f76:	d101      	bne.n	8003f7c <__sfputs_r+0x12>
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e007      	b.n	8003f8c <__sfputs_r+0x22>
 8003f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f80:	463a      	mov	r2, r7
 8003f82:	4630      	mov	r0, r6
 8003f84:	f7ff ffda 	bl	8003f3c <__sfputc_r>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d1f3      	bne.n	8003f74 <__sfputs_r+0xa>
 8003f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f90 <_vfiprintf_r>:
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	460d      	mov	r5, r1
 8003f96:	b09d      	sub	sp, #116	; 0x74
 8003f98:	4614      	mov	r4, r2
 8003f9a:	4698      	mov	r8, r3
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	b118      	cbz	r0, 8003fa8 <_vfiprintf_r+0x18>
 8003fa0:	6983      	ldr	r3, [r0, #24]
 8003fa2:	b90b      	cbnz	r3, 8003fa8 <_vfiprintf_r+0x18>
 8003fa4:	f7ff fe96 	bl	8003cd4 <__sinit>
 8003fa8:	4b89      	ldr	r3, [pc, #548]	; (80041d0 <_vfiprintf_r+0x240>)
 8003faa:	429d      	cmp	r5, r3
 8003fac:	d11b      	bne.n	8003fe6 <_vfiprintf_r+0x56>
 8003fae:	6875      	ldr	r5, [r6, #4]
 8003fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb2:	07d9      	lsls	r1, r3, #31
 8003fb4:	d405      	bmi.n	8003fc2 <_vfiprintf_r+0x32>
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	059a      	lsls	r2, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_vfiprintf_r+0x32>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fbe:	f7ff ff27 	bl	8003e10 <__retarget_lock_acquire_recursive>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	d501      	bpl.n	8003fcc <_vfiprintf_r+0x3c>
 8003fc8:	692b      	ldr	r3, [r5, #16]
 8003fca:	b9eb      	cbnz	r3, 8004008 <_vfiprintf_r+0x78>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 fb5a 	bl	8004688 <__swsetup_r>
 8003fd4:	b1c0      	cbz	r0, 8004008 <_vfiprintf_r+0x78>
 8003fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd8:	07dc      	lsls	r4, r3, #31
 8003fda:	d50e      	bpl.n	8003ffa <_vfiprintf_r+0x6a>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	b01d      	add	sp, #116	; 0x74
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	4b7b      	ldr	r3, [pc, #492]	; (80041d4 <_vfiprintf_r+0x244>)
 8003fe8:	429d      	cmp	r5, r3
 8003fea:	d101      	bne.n	8003ff0 <_vfiprintf_r+0x60>
 8003fec:	68b5      	ldr	r5, [r6, #8]
 8003fee:	e7df      	b.n	8003fb0 <_vfiprintf_r+0x20>
 8003ff0:	4b79      	ldr	r3, [pc, #484]	; (80041d8 <_vfiprintf_r+0x248>)
 8003ff2:	429d      	cmp	r5, r3
 8003ff4:	bf08      	it	eq
 8003ff6:	68f5      	ldreq	r5, [r6, #12]
 8003ff8:	e7da      	b.n	8003fb0 <_vfiprintf_r+0x20>
 8003ffa:	89ab      	ldrh	r3, [r5, #12]
 8003ffc:	0598      	lsls	r0, r3, #22
 8003ffe:	d4ed      	bmi.n	8003fdc <_vfiprintf_r+0x4c>
 8004000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004002:	f7ff ff06 	bl	8003e12 <__retarget_lock_release_recursive>
 8004006:	e7e9      	b.n	8003fdc <_vfiprintf_r+0x4c>
 8004008:	2300      	movs	r3, #0
 800400a:	9309      	str	r3, [sp, #36]	; 0x24
 800400c:	2320      	movs	r3, #32
 800400e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004012:	f8cd 800c 	str.w	r8, [sp, #12]
 8004016:	2330      	movs	r3, #48	; 0x30
 8004018:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041dc <_vfiprintf_r+0x24c>
 800401c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004020:	f04f 0901 	mov.w	r9, #1
 8004024:	4623      	mov	r3, r4
 8004026:	469a      	mov	sl, r3
 8004028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402c:	b10a      	cbz	r2, 8004032 <_vfiprintf_r+0xa2>
 800402e:	2a25      	cmp	r2, #37	; 0x25
 8004030:	d1f9      	bne.n	8004026 <_vfiprintf_r+0x96>
 8004032:	ebba 0b04 	subs.w	fp, sl, r4
 8004036:	d00b      	beq.n	8004050 <_vfiprintf_r+0xc0>
 8004038:	465b      	mov	r3, fp
 800403a:	4622      	mov	r2, r4
 800403c:	4629      	mov	r1, r5
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff ff93 	bl	8003f6a <__sfputs_r>
 8004044:	3001      	adds	r0, #1
 8004046:	f000 80aa 	beq.w	800419e <_vfiprintf_r+0x20e>
 800404a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800404c:	445a      	add	r2, fp
 800404e:	9209      	str	r2, [sp, #36]	; 0x24
 8004050:	f89a 3000 	ldrb.w	r3, [sl]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80a2 	beq.w	800419e <_vfiprintf_r+0x20e>
 800405a:	2300      	movs	r3, #0
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004064:	f10a 0a01 	add.w	sl, sl, #1
 8004068:	9304      	str	r3, [sp, #16]
 800406a:	9307      	str	r3, [sp, #28]
 800406c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004070:	931a      	str	r3, [sp, #104]	; 0x68
 8004072:	4654      	mov	r4, sl
 8004074:	2205      	movs	r2, #5
 8004076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407a:	4858      	ldr	r0, [pc, #352]	; (80041dc <_vfiprintf_r+0x24c>)
 800407c:	f7fc f8b0 	bl	80001e0 <memchr>
 8004080:	9a04      	ldr	r2, [sp, #16]
 8004082:	b9d8      	cbnz	r0, 80040bc <_vfiprintf_r+0x12c>
 8004084:	06d1      	lsls	r1, r2, #27
 8004086:	bf44      	itt	mi
 8004088:	2320      	movmi	r3, #32
 800408a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800408e:	0713      	lsls	r3, r2, #28
 8004090:	bf44      	itt	mi
 8004092:	232b      	movmi	r3, #43	; 0x2b
 8004094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004098:	f89a 3000 	ldrb.w	r3, [sl]
 800409c:	2b2a      	cmp	r3, #42	; 0x2a
 800409e:	d015      	beq.n	80040cc <_vfiprintf_r+0x13c>
 80040a0:	9a07      	ldr	r2, [sp, #28]
 80040a2:	4654      	mov	r4, sl
 80040a4:	2000      	movs	r0, #0
 80040a6:	f04f 0c0a 	mov.w	ip, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040b0:	3b30      	subs	r3, #48	; 0x30
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	d94e      	bls.n	8004154 <_vfiprintf_r+0x1c4>
 80040b6:	b1b0      	cbz	r0, 80040e6 <_vfiprintf_r+0x156>
 80040b8:	9207      	str	r2, [sp, #28]
 80040ba:	e014      	b.n	80040e6 <_vfiprintf_r+0x156>
 80040bc:	eba0 0308 	sub.w	r3, r0, r8
 80040c0:	fa09 f303 	lsl.w	r3, r9, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	46a2      	mov	sl, r4
 80040ca:	e7d2      	b.n	8004072 <_vfiprintf_r+0xe2>
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	1d19      	adds	r1, r3, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	9103      	str	r1, [sp, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bfbb      	ittet	lt
 80040d8:	425b      	neglt	r3, r3
 80040da:	f042 0202 	orrlt.w	r2, r2, #2
 80040de:	9307      	strge	r3, [sp, #28]
 80040e0:	9307      	strlt	r3, [sp, #28]
 80040e2:	bfb8      	it	lt
 80040e4:	9204      	strlt	r2, [sp, #16]
 80040e6:	7823      	ldrb	r3, [r4, #0]
 80040e8:	2b2e      	cmp	r3, #46	; 0x2e
 80040ea:	d10c      	bne.n	8004106 <_vfiprintf_r+0x176>
 80040ec:	7863      	ldrb	r3, [r4, #1]
 80040ee:	2b2a      	cmp	r3, #42	; 0x2a
 80040f0:	d135      	bne.n	800415e <_vfiprintf_r+0x1ce>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9203      	str	r2, [sp, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfb8      	it	lt
 80040fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004102:	3402      	adds	r4, #2
 8004104:	9305      	str	r3, [sp, #20]
 8004106:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041ec <_vfiprintf_r+0x25c>
 800410a:	7821      	ldrb	r1, [r4, #0]
 800410c:	2203      	movs	r2, #3
 800410e:	4650      	mov	r0, sl
 8004110:	f7fc f866 	bl	80001e0 <memchr>
 8004114:	b140      	cbz	r0, 8004128 <_vfiprintf_r+0x198>
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	eba0 000a 	sub.w	r0, r0, sl
 800411c:	fa03 f000 	lsl.w	r0, r3, r0
 8004120:	9b04      	ldr	r3, [sp, #16]
 8004122:	4303      	orrs	r3, r0
 8004124:	3401      	adds	r4, #1
 8004126:	9304      	str	r3, [sp, #16]
 8004128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412c:	482c      	ldr	r0, [pc, #176]	; (80041e0 <_vfiprintf_r+0x250>)
 800412e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004132:	2206      	movs	r2, #6
 8004134:	f7fc f854 	bl	80001e0 <memchr>
 8004138:	2800      	cmp	r0, #0
 800413a:	d03f      	beq.n	80041bc <_vfiprintf_r+0x22c>
 800413c:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <_vfiprintf_r+0x254>)
 800413e:	bb1b      	cbnz	r3, 8004188 <_vfiprintf_r+0x1f8>
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	3307      	adds	r3, #7
 8004144:	f023 0307 	bic.w	r3, r3, #7
 8004148:	3308      	adds	r3, #8
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414e:	443b      	add	r3, r7
 8004150:	9309      	str	r3, [sp, #36]	; 0x24
 8004152:	e767      	b.n	8004024 <_vfiprintf_r+0x94>
 8004154:	fb0c 3202 	mla	r2, ip, r2, r3
 8004158:	460c      	mov	r4, r1
 800415a:	2001      	movs	r0, #1
 800415c:	e7a5      	b.n	80040aa <_vfiprintf_r+0x11a>
 800415e:	2300      	movs	r3, #0
 8004160:	3401      	adds	r4, #1
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	4619      	mov	r1, r3
 8004166:	f04f 0c0a 	mov.w	ip, #10
 800416a:	4620      	mov	r0, r4
 800416c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004170:	3a30      	subs	r2, #48	; 0x30
 8004172:	2a09      	cmp	r2, #9
 8004174:	d903      	bls.n	800417e <_vfiprintf_r+0x1ee>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0c5      	beq.n	8004106 <_vfiprintf_r+0x176>
 800417a:	9105      	str	r1, [sp, #20]
 800417c:	e7c3      	b.n	8004106 <_vfiprintf_r+0x176>
 800417e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004182:	4604      	mov	r4, r0
 8004184:	2301      	movs	r3, #1
 8004186:	e7f0      	b.n	800416a <_vfiprintf_r+0x1da>
 8004188:	ab03      	add	r3, sp, #12
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	462a      	mov	r2, r5
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <_vfiprintf_r+0x258>)
 8004190:	a904      	add	r1, sp, #16
 8004192:	4630      	mov	r0, r6
 8004194:	f3af 8000 	nop.w
 8004198:	4607      	mov	r7, r0
 800419a:	1c78      	adds	r0, r7, #1
 800419c:	d1d6      	bne.n	800414c <_vfiprintf_r+0x1bc>
 800419e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a0:	07d9      	lsls	r1, r3, #31
 80041a2:	d405      	bmi.n	80041b0 <_vfiprintf_r+0x220>
 80041a4:	89ab      	ldrh	r3, [r5, #12]
 80041a6:	059a      	lsls	r2, r3, #22
 80041a8:	d402      	bmi.n	80041b0 <_vfiprintf_r+0x220>
 80041aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ac:	f7ff fe31 	bl	8003e12 <__retarget_lock_release_recursive>
 80041b0:	89ab      	ldrh	r3, [r5, #12]
 80041b2:	065b      	lsls	r3, r3, #25
 80041b4:	f53f af12 	bmi.w	8003fdc <_vfiprintf_r+0x4c>
 80041b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ba:	e711      	b.n	8003fe0 <_vfiprintf_r+0x50>
 80041bc:	ab03      	add	r3, sp, #12
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	462a      	mov	r2, r5
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <_vfiprintf_r+0x258>)
 80041c4:	a904      	add	r1, sp, #16
 80041c6:	4630      	mov	r0, r6
 80041c8:	f000 f880 	bl	80042cc <_printf_i>
 80041cc:	e7e4      	b.n	8004198 <_vfiprintf_r+0x208>
 80041ce:	bf00      	nop
 80041d0:	08004b74 	.word	0x08004b74
 80041d4:	08004b94 	.word	0x08004b94
 80041d8:	08004b54 	.word	0x08004b54
 80041dc:	08004bb4 	.word	0x08004bb4
 80041e0:	08004bbe 	.word	0x08004bbe
 80041e4:	00000000 	.word	0x00000000
 80041e8:	08003f6b 	.word	0x08003f6b
 80041ec:	08004bba 	.word	0x08004bba

080041f0 <_printf_common>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	4616      	mov	r6, r2
 80041f6:	4699      	mov	r9, r3
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	690b      	ldr	r3, [r1, #16]
 80041fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004200:	4293      	cmp	r3, r2
 8004202:	bfb8      	it	lt
 8004204:	4613      	movlt	r3, r2
 8004206:	6033      	str	r3, [r6, #0]
 8004208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800420c:	4607      	mov	r7, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b10a      	cbz	r2, 8004216 <_printf_common+0x26>
 8004212:	3301      	adds	r3, #1
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	0699      	lsls	r1, r3, #26
 800421a:	bf42      	ittt	mi
 800421c:	6833      	ldrmi	r3, [r6, #0]
 800421e:	3302      	addmi	r3, #2
 8004220:	6033      	strmi	r3, [r6, #0]
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	f015 0506 	ands.w	r5, r5, #6
 8004228:	d106      	bne.n	8004238 <_printf_common+0x48>
 800422a:	f104 0a19 	add.w	sl, r4, #25
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	6832      	ldr	r2, [r6, #0]
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	42ab      	cmp	r3, r5
 8004236:	dc26      	bgt.n	8004286 <_printf_common+0x96>
 8004238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800423c:	1e13      	subs	r3, r2, #0
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	bf18      	it	ne
 8004242:	2301      	movne	r3, #1
 8004244:	0692      	lsls	r2, r2, #26
 8004246:	d42b      	bmi.n	80042a0 <_printf_common+0xb0>
 8004248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800424c:	4649      	mov	r1, r9
 800424e:	4638      	mov	r0, r7
 8004250:	47c0      	blx	r8
 8004252:	3001      	adds	r0, #1
 8004254:	d01e      	beq.n	8004294 <_printf_common+0xa4>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	68e5      	ldr	r5, [r4, #12]
 800425a:	6832      	ldr	r2, [r6, #0]
 800425c:	f003 0306 	and.w	r3, r3, #6
 8004260:	2b04      	cmp	r3, #4
 8004262:	bf08      	it	eq
 8004264:	1aad      	subeq	r5, r5, r2
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	bf0c      	ite	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	2500      	movne	r5, #0
 8004272:	4293      	cmp	r3, r2
 8004274:	bfc4      	itt	gt
 8004276:	1a9b      	subgt	r3, r3, r2
 8004278:	18ed      	addgt	r5, r5, r3
 800427a:	2600      	movs	r6, #0
 800427c:	341a      	adds	r4, #26
 800427e:	42b5      	cmp	r5, r6
 8004280:	d11a      	bne.n	80042b8 <_printf_common+0xc8>
 8004282:	2000      	movs	r0, #0
 8004284:	e008      	b.n	8004298 <_printf_common+0xa8>
 8004286:	2301      	movs	r3, #1
 8004288:	4652      	mov	r2, sl
 800428a:	4649      	mov	r1, r9
 800428c:	4638      	mov	r0, r7
 800428e:	47c0      	blx	r8
 8004290:	3001      	adds	r0, #1
 8004292:	d103      	bne.n	800429c <_printf_common+0xac>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	3501      	adds	r5, #1
 800429e:	e7c6      	b.n	800422e <_printf_common+0x3e>
 80042a0:	18e1      	adds	r1, r4, r3
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	2030      	movs	r0, #48	; 0x30
 80042a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042aa:	4422      	add	r2, r4
 80042ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b4:	3302      	adds	r3, #2
 80042b6:	e7c7      	b.n	8004248 <_printf_common+0x58>
 80042b8:	2301      	movs	r3, #1
 80042ba:	4622      	mov	r2, r4
 80042bc:	4649      	mov	r1, r9
 80042be:	4638      	mov	r0, r7
 80042c0:	47c0      	blx	r8
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0e6      	beq.n	8004294 <_printf_common+0xa4>
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7d9      	b.n	800427e <_printf_common+0x8e>
	...

080042cc <_printf_i>:
 80042cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	7e0f      	ldrb	r7, [r1, #24]
 80042d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042d4:	2f78      	cmp	r7, #120	; 0x78
 80042d6:	4691      	mov	r9, r2
 80042d8:	4680      	mov	r8, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	469a      	mov	sl, r3
 80042de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042e2:	d807      	bhi.n	80042f4 <_printf_i+0x28>
 80042e4:	2f62      	cmp	r7, #98	; 0x62
 80042e6:	d80a      	bhi.n	80042fe <_printf_i+0x32>
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	f000 80d8 	beq.w	800449e <_printf_i+0x1d2>
 80042ee:	2f58      	cmp	r7, #88	; 0x58
 80042f0:	f000 80a3 	beq.w	800443a <_printf_i+0x16e>
 80042f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042fc:	e03a      	b.n	8004374 <_printf_i+0xa8>
 80042fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004302:	2b15      	cmp	r3, #21
 8004304:	d8f6      	bhi.n	80042f4 <_printf_i+0x28>
 8004306:	a101      	add	r1, pc, #4	; (adr r1, 800430c <_printf_i+0x40>)
 8004308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800430c:	08004365 	.word	0x08004365
 8004310:	08004379 	.word	0x08004379
 8004314:	080042f5 	.word	0x080042f5
 8004318:	080042f5 	.word	0x080042f5
 800431c:	080042f5 	.word	0x080042f5
 8004320:	080042f5 	.word	0x080042f5
 8004324:	08004379 	.word	0x08004379
 8004328:	080042f5 	.word	0x080042f5
 800432c:	080042f5 	.word	0x080042f5
 8004330:	080042f5 	.word	0x080042f5
 8004334:	080042f5 	.word	0x080042f5
 8004338:	08004485 	.word	0x08004485
 800433c:	080043a9 	.word	0x080043a9
 8004340:	08004467 	.word	0x08004467
 8004344:	080042f5 	.word	0x080042f5
 8004348:	080042f5 	.word	0x080042f5
 800434c:	080044a7 	.word	0x080044a7
 8004350:	080042f5 	.word	0x080042f5
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080042f5 	.word	0x080042f5
 800435c:	080042f5 	.word	0x080042f5
 8004360:	0800446f 	.word	0x0800446f
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	602a      	str	r2, [r5, #0]
 800436c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004374:	2301      	movs	r3, #1
 8004376:	e0a3      	b.n	80044c0 <_printf_i+0x1f4>
 8004378:	6820      	ldr	r0, [r4, #0]
 800437a:	6829      	ldr	r1, [r5, #0]
 800437c:	0606      	lsls	r6, r0, #24
 800437e:	f101 0304 	add.w	r3, r1, #4
 8004382:	d50a      	bpl.n	800439a <_printf_i+0xce>
 8004384:	680e      	ldr	r6, [r1, #0]
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	2e00      	cmp	r6, #0
 800438a:	da03      	bge.n	8004394 <_printf_i+0xc8>
 800438c:	232d      	movs	r3, #45	; 0x2d
 800438e:	4276      	negs	r6, r6
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	485e      	ldr	r0, [pc, #376]	; (8004510 <_printf_i+0x244>)
 8004396:	230a      	movs	r3, #10
 8004398:	e019      	b.n	80043ce <_printf_i+0x102>
 800439a:	680e      	ldr	r6, [r1, #0]
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043a2:	bf18      	it	ne
 80043a4:	b236      	sxthne	r6, r6
 80043a6:	e7ef      	b.n	8004388 <_printf_i+0xbc>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	1d19      	adds	r1, r3, #4
 80043ae:	6029      	str	r1, [r5, #0]
 80043b0:	0601      	lsls	r1, r0, #24
 80043b2:	d501      	bpl.n	80043b8 <_printf_i+0xec>
 80043b4:	681e      	ldr	r6, [r3, #0]
 80043b6:	e002      	b.n	80043be <_printf_i+0xf2>
 80043b8:	0646      	lsls	r6, r0, #25
 80043ba:	d5fb      	bpl.n	80043b4 <_printf_i+0xe8>
 80043bc:	881e      	ldrh	r6, [r3, #0]
 80043be:	4854      	ldr	r0, [pc, #336]	; (8004510 <_printf_i+0x244>)
 80043c0:	2f6f      	cmp	r7, #111	; 0x6f
 80043c2:	bf0c      	ite	eq
 80043c4:	2308      	moveq	r3, #8
 80043c6:	230a      	movne	r3, #10
 80043c8:	2100      	movs	r1, #0
 80043ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ce:	6865      	ldr	r5, [r4, #4]
 80043d0:	60a5      	str	r5, [r4, #8]
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	bfa2      	ittt	ge
 80043d6:	6821      	ldrge	r1, [r4, #0]
 80043d8:	f021 0104 	bicge.w	r1, r1, #4
 80043dc:	6021      	strge	r1, [r4, #0]
 80043de:	b90e      	cbnz	r6, 80043e4 <_printf_i+0x118>
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	d04d      	beq.n	8004480 <_printf_i+0x1b4>
 80043e4:	4615      	mov	r5, r2
 80043e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ea:	fb03 6711 	mls	r7, r3, r1, r6
 80043ee:	5dc7      	ldrb	r7, [r0, r7]
 80043f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043f4:	4637      	mov	r7, r6
 80043f6:	42bb      	cmp	r3, r7
 80043f8:	460e      	mov	r6, r1
 80043fa:	d9f4      	bls.n	80043e6 <_printf_i+0x11a>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d10b      	bne.n	8004418 <_printf_i+0x14c>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	07de      	lsls	r6, r3, #31
 8004404:	d508      	bpl.n	8004418 <_printf_i+0x14c>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	6861      	ldr	r1, [r4, #4]
 800440a:	4299      	cmp	r1, r3
 800440c:	bfde      	ittt	le
 800440e:	2330      	movle	r3, #48	; 0x30
 8004410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004418:	1b52      	subs	r2, r2, r5
 800441a:	6122      	str	r2, [r4, #16]
 800441c:	f8cd a000 	str.w	sl, [sp]
 8004420:	464b      	mov	r3, r9
 8004422:	aa03      	add	r2, sp, #12
 8004424:	4621      	mov	r1, r4
 8004426:	4640      	mov	r0, r8
 8004428:	f7ff fee2 	bl	80041f0 <_printf_common>
 800442c:	3001      	adds	r0, #1
 800442e:	d14c      	bne.n	80044ca <_printf_i+0x1fe>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	b004      	add	sp, #16
 8004436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443a:	4835      	ldr	r0, [pc, #212]	; (8004510 <_printf_i+0x244>)
 800443c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004440:	6829      	ldr	r1, [r5, #0]
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f851 6b04 	ldr.w	r6, [r1], #4
 8004448:	6029      	str	r1, [r5, #0]
 800444a:	061d      	lsls	r5, r3, #24
 800444c:	d514      	bpl.n	8004478 <_printf_i+0x1ac>
 800444e:	07df      	lsls	r7, r3, #31
 8004450:	bf44      	itt	mi
 8004452:	f043 0320 	orrmi.w	r3, r3, #32
 8004456:	6023      	strmi	r3, [r4, #0]
 8004458:	b91e      	cbnz	r6, 8004462 <_printf_i+0x196>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	f023 0320 	bic.w	r3, r3, #32
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	2310      	movs	r3, #16
 8004464:	e7b0      	b.n	80043c8 <_printf_i+0xfc>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f043 0320 	orr.w	r3, r3, #32
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	2378      	movs	r3, #120	; 0x78
 8004470:	4828      	ldr	r0, [pc, #160]	; (8004514 <_printf_i+0x248>)
 8004472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004476:	e7e3      	b.n	8004440 <_printf_i+0x174>
 8004478:	0659      	lsls	r1, r3, #25
 800447a:	bf48      	it	mi
 800447c:	b2b6      	uxthmi	r6, r6
 800447e:	e7e6      	b.n	800444e <_printf_i+0x182>
 8004480:	4615      	mov	r5, r2
 8004482:	e7bb      	b.n	80043fc <_printf_i+0x130>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	6826      	ldr	r6, [r4, #0]
 8004488:	6961      	ldr	r1, [r4, #20]
 800448a:	1d18      	adds	r0, r3, #4
 800448c:	6028      	str	r0, [r5, #0]
 800448e:	0635      	lsls	r5, r6, #24
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	d501      	bpl.n	8004498 <_printf_i+0x1cc>
 8004494:	6019      	str	r1, [r3, #0]
 8004496:	e002      	b.n	800449e <_printf_i+0x1d2>
 8004498:	0670      	lsls	r0, r6, #25
 800449a:	d5fb      	bpl.n	8004494 <_printf_i+0x1c8>
 800449c:	8019      	strh	r1, [r3, #0]
 800449e:	2300      	movs	r3, #0
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	4615      	mov	r5, r2
 80044a4:	e7ba      	b.n	800441c <_printf_i+0x150>
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	1d1a      	adds	r2, r3, #4
 80044aa:	602a      	str	r2, [r5, #0]
 80044ac:	681d      	ldr	r5, [r3, #0]
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	2100      	movs	r1, #0
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7fb fe94 	bl	80001e0 <memchr>
 80044b8:	b108      	cbz	r0, 80044be <_printf_i+0x1f2>
 80044ba:	1b40      	subs	r0, r0, r5
 80044bc:	6060      	str	r0, [r4, #4]
 80044be:	6863      	ldr	r3, [r4, #4]
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	2300      	movs	r3, #0
 80044c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c8:	e7a8      	b.n	800441c <_printf_i+0x150>
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	462a      	mov	r2, r5
 80044ce:	4649      	mov	r1, r9
 80044d0:	4640      	mov	r0, r8
 80044d2:	47d0      	blx	sl
 80044d4:	3001      	adds	r0, #1
 80044d6:	d0ab      	beq.n	8004430 <_printf_i+0x164>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	079b      	lsls	r3, r3, #30
 80044dc:	d413      	bmi.n	8004506 <_printf_i+0x23a>
 80044de:	68e0      	ldr	r0, [r4, #12]
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	4298      	cmp	r0, r3
 80044e4:	bfb8      	it	lt
 80044e6:	4618      	movlt	r0, r3
 80044e8:	e7a4      	b.n	8004434 <_printf_i+0x168>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4632      	mov	r2, r6
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d09b      	beq.n	8004430 <_printf_i+0x164>
 80044f8:	3501      	adds	r5, #1
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	9903      	ldr	r1, [sp, #12]
 80044fe:	1a5b      	subs	r3, r3, r1
 8004500:	42ab      	cmp	r3, r5
 8004502:	dcf2      	bgt.n	80044ea <_printf_i+0x21e>
 8004504:	e7eb      	b.n	80044de <_printf_i+0x212>
 8004506:	2500      	movs	r5, #0
 8004508:	f104 0619 	add.w	r6, r4, #25
 800450c:	e7f5      	b.n	80044fa <_printf_i+0x22e>
 800450e:	bf00      	nop
 8004510:	08004bc5 	.word	0x08004bc5
 8004514:	08004bd6 	.word	0x08004bd6

08004518 <_sbrk_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d06      	ldr	r5, [pc, #24]	; (8004534 <_sbrk_r+0x1c>)
 800451c:	2300      	movs	r3, #0
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	f7fc fc14 	bl	8000d50 <_sbrk>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_sbrk_r+0x1a>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_sbrk_r+0x1a>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000174 	.word	0x20000174

08004538 <__sread>:
 8004538:	b510      	push	{r4, lr}
 800453a:	460c      	mov	r4, r1
 800453c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004540:	f000 fab2 	bl	8004aa8 <_read_r>
 8004544:	2800      	cmp	r0, #0
 8004546:	bfab      	itete	ge
 8004548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800454a:	89a3      	ldrhlt	r3, [r4, #12]
 800454c:	181b      	addge	r3, r3, r0
 800454e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004552:	bfac      	ite	ge
 8004554:	6563      	strge	r3, [r4, #84]	; 0x54
 8004556:	81a3      	strhlt	r3, [r4, #12]
 8004558:	bd10      	pop	{r4, pc}

0800455a <__swrite>:
 800455a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455e:	461f      	mov	r7, r3
 8004560:	898b      	ldrh	r3, [r1, #12]
 8004562:	05db      	lsls	r3, r3, #23
 8004564:	4605      	mov	r5, r0
 8004566:	460c      	mov	r4, r1
 8004568:	4616      	mov	r6, r2
 800456a:	d505      	bpl.n	8004578 <__swrite+0x1e>
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	2302      	movs	r3, #2
 8004572:	2200      	movs	r2, #0
 8004574:	f000 f9c8 	bl	8004908 <_lseek_r>
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800457e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	4632      	mov	r2, r6
 8004586:	463b      	mov	r3, r7
 8004588:	4628      	mov	r0, r5
 800458a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800458e:	f000 b869 	b.w	8004664 <_write_r>

08004592 <__sseek>:
 8004592:	b510      	push	{r4, lr}
 8004594:	460c      	mov	r4, r1
 8004596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459a:	f000 f9b5 	bl	8004908 <_lseek_r>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	bf15      	itete	ne
 80045a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80045a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045ae:	81a3      	strheq	r3, [r4, #12]
 80045b0:	bf18      	it	ne
 80045b2:	81a3      	strhne	r3, [r4, #12]
 80045b4:	bd10      	pop	{r4, pc}

080045b6 <__sclose>:
 80045b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ba:	f000 b8d3 	b.w	8004764 <_close_r>
	...

080045c0 <__swbuf_r>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	460e      	mov	r6, r1
 80045c4:	4614      	mov	r4, r2
 80045c6:	4605      	mov	r5, r0
 80045c8:	b118      	cbz	r0, 80045d2 <__swbuf_r+0x12>
 80045ca:	6983      	ldr	r3, [r0, #24]
 80045cc:	b90b      	cbnz	r3, 80045d2 <__swbuf_r+0x12>
 80045ce:	f7ff fb81 	bl	8003cd4 <__sinit>
 80045d2:	4b21      	ldr	r3, [pc, #132]	; (8004658 <__swbuf_r+0x98>)
 80045d4:	429c      	cmp	r4, r3
 80045d6:	d12b      	bne.n	8004630 <__swbuf_r+0x70>
 80045d8:	686c      	ldr	r4, [r5, #4]
 80045da:	69a3      	ldr	r3, [r4, #24]
 80045dc:	60a3      	str	r3, [r4, #8]
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	071a      	lsls	r2, r3, #28
 80045e2:	d52f      	bpl.n	8004644 <__swbuf_r+0x84>
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	b36b      	cbz	r3, 8004644 <__swbuf_r+0x84>
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	1ac0      	subs	r0, r0, r3
 80045ee:	6963      	ldr	r3, [r4, #20]
 80045f0:	b2f6      	uxtb	r6, r6
 80045f2:	4283      	cmp	r3, r0
 80045f4:	4637      	mov	r7, r6
 80045f6:	dc04      	bgt.n	8004602 <__swbuf_r+0x42>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 f948 	bl	8004890 <_fflush_r>
 8004600:	bb30      	cbnz	r0, 8004650 <__swbuf_r+0x90>
 8004602:	68a3      	ldr	r3, [r4, #8]
 8004604:	3b01      	subs	r3, #1
 8004606:	60a3      	str	r3, [r4, #8]
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	6022      	str	r2, [r4, #0]
 800460e:	701e      	strb	r6, [r3, #0]
 8004610:	6963      	ldr	r3, [r4, #20]
 8004612:	3001      	adds	r0, #1
 8004614:	4283      	cmp	r3, r0
 8004616:	d004      	beq.n	8004622 <__swbuf_r+0x62>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	07db      	lsls	r3, r3, #31
 800461c:	d506      	bpl.n	800462c <__swbuf_r+0x6c>
 800461e:	2e0a      	cmp	r6, #10
 8004620:	d104      	bne.n	800462c <__swbuf_r+0x6c>
 8004622:	4621      	mov	r1, r4
 8004624:	4628      	mov	r0, r5
 8004626:	f000 f933 	bl	8004890 <_fflush_r>
 800462a:	b988      	cbnz	r0, 8004650 <__swbuf_r+0x90>
 800462c:	4638      	mov	r0, r7
 800462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <__swbuf_r+0x9c>)
 8004632:	429c      	cmp	r4, r3
 8004634:	d101      	bne.n	800463a <__swbuf_r+0x7a>
 8004636:	68ac      	ldr	r4, [r5, #8]
 8004638:	e7cf      	b.n	80045da <__swbuf_r+0x1a>
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <__swbuf_r+0xa0>)
 800463c:	429c      	cmp	r4, r3
 800463e:	bf08      	it	eq
 8004640:	68ec      	ldreq	r4, [r5, #12]
 8004642:	e7ca      	b.n	80045da <__swbuf_r+0x1a>
 8004644:	4621      	mov	r1, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 f81e 	bl	8004688 <__swsetup_r>
 800464c:	2800      	cmp	r0, #0
 800464e:	d0cb      	beq.n	80045e8 <__swbuf_r+0x28>
 8004650:	f04f 37ff 	mov.w	r7, #4294967295
 8004654:	e7ea      	b.n	800462c <__swbuf_r+0x6c>
 8004656:	bf00      	nop
 8004658:	08004b74 	.word	0x08004b74
 800465c:	08004b94 	.word	0x08004b94
 8004660:	08004b54 	.word	0x08004b54

08004664 <_write_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	; (8004684 <_write_r+0x20>)
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	2200      	movs	r2, #0
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fc fb1b 	bl	8000cae <_write>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_write_r+0x1e>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_write_r+0x1e>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000174 	.word	0x20000174

08004688 <__swsetup_r>:
 8004688:	4b32      	ldr	r3, [pc, #200]	; (8004754 <__swsetup_r+0xcc>)
 800468a:	b570      	push	{r4, r5, r6, lr}
 800468c:	681d      	ldr	r5, [r3, #0]
 800468e:	4606      	mov	r6, r0
 8004690:	460c      	mov	r4, r1
 8004692:	b125      	cbz	r5, 800469e <__swsetup_r+0x16>
 8004694:	69ab      	ldr	r3, [r5, #24]
 8004696:	b913      	cbnz	r3, 800469e <__swsetup_r+0x16>
 8004698:	4628      	mov	r0, r5
 800469a:	f7ff fb1b 	bl	8003cd4 <__sinit>
 800469e:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <__swsetup_r+0xd0>)
 80046a0:	429c      	cmp	r4, r3
 80046a2:	d10f      	bne.n	80046c4 <__swsetup_r+0x3c>
 80046a4:	686c      	ldr	r4, [r5, #4]
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046ac:	0719      	lsls	r1, r3, #28
 80046ae:	d42c      	bmi.n	800470a <__swsetup_r+0x82>
 80046b0:	06dd      	lsls	r5, r3, #27
 80046b2:	d411      	bmi.n	80046d8 <__swsetup_r+0x50>
 80046b4:	2309      	movs	r3, #9
 80046b6:	6033      	str	r3, [r6, #0]
 80046b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	e03e      	b.n	8004742 <__swsetup_r+0xba>
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <__swsetup_r+0xd4>)
 80046c6:	429c      	cmp	r4, r3
 80046c8:	d101      	bne.n	80046ce <__swsetup_r+0x46>
 80046ca:	68ac      	ldr	r4, [r5, #8]
 80046cc:	e7eb      	b.n	80046a6 <__swsetup_r+0x1e>
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <__swsetup_r+0xd8>)
 80046d0:	429c      	cmp	r4, r3
 80046d2:	bf08      	it	eq
 80046d4:	68ec      	ldreq	r4, [r5, #12]
 80046d6:	e7e6      	b.n	80046a6 <__swsetup_r+0x1e>
 80046d8:	0758      	lsls	r0, r3, #29
 80046da:	d512      	bpl.n	8004702 <__swsetup_r+0x7a>
 80046dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046de:	b141      	cbz	r1, 80046f2 <__swsetup_r+0x6a>
 80046e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d002      	beq.n	80046ee <__swsetup_r+0x66>
 80046e8:	4630      	mov	r0, r6
 80046ea:	f000 f991 	bl	8004a10 <_free_r>
 80046ee:	2300      	movs	r3, #0
 80046f0:	6363      	str	r3, [r4, #52]	; 0x34
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	2300      	movs	r3, #0
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f043 0308 	orr.w	r3, r3, #8
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	b94b      	cbnz	r3, 8004722 <__swsetup_r+0x9a>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004718:	d003      	beq.n	8004722 <__swsetup_r+0x9a>
 800471a:	4621      	mov	r1, r4
 800471c:	4630      	mov	r0, r6
 800471e:	f000 f92b 	bl	8004978 <__smakebuf_r>
 8004722:	89a0      	ldrh	r0, [r4, #12]
 8004724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004728:	f010 0301 	ands.w	r3, r0, #1
 800472c:	d00a      	beq.n	8004744 <__swsetup_r+0xbc>
 800472e:	2300      	movs	r3, #0
 8004730:	60a3      	str	r3, [r4, #8]
 8004732:	6963      	ldr	r3, [r4, #20]
 8004734:	425b      	negs	r3, r3
 8004736:	61a3      	str	r3, [r4, #24]
 8004738:	6923      	ldr	r3, [r4, #16]
 800473a:	b943      	cbnz	r3, 800474e <__swsetup_r+0xc6>
 800473c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004740:	d1ba      	bne.n	80046b8 <__swsetup_r+0x30>
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	0781      	lsls	r1, r0, #30
 8004746:	bf58      	it	pl
 8004748:	6963      	ldrpl	r3, [r4, #20]
 800474a:	60a3      	str	r3, [r4, #8]
 800474c:	e7f4      	b.n	8004738 <__swsetup_r+0xb0>
 800474e:	2000      	movs	r0, #0
 8004750:	e7f7      	b.n	8004742 <__swsetup_r+0xba>
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	08004b74 	.word	0x08004b74
 800475c:	08004b94 	.word	0x08004b94
 8004760:	08004b54 	.word	0x08004b54

08004764 <_close_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d06      	ldr	r5, [pc, #24]	; (8004780 <_close_r+0x1c>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fc fab9 	bl	8000ce6 <_close>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_close_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_close_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	20000174 	.word	0x20000174

08004784 <__sflush_r>:
 8004784:	898a      	ldrh	r2, [r1, #12]
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	0710      	lsls	r0, r2, #28
 800478e:	460c      	mov	r4, r1
 8004790:	d458      	bmi.n	8004844 <__sflush_r+0xc0>
 8004792:	684b      	ldr	r3, [r1, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc05      	bgt.n	80047a4 <__sflush_r+0x20>
 8004798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	dc02      	bgt.n	80047a4 <__sflush_r+0x20>
 800479e:	2000      	movs	r0, #0
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	d0f9      	beq.n	800479e <__sflush_r+0x1a>
 80047aa:	2300      	movs	r3, #0
 80047ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b0:	682f      	ldr	r7, [r5, #0]
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	d032      	beq.n	800481c <__sflush_r+0x98>
 80047b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	075a      	lsls	r2, r3, #29
 80047bc:	d505      	bpl.n	80047ca <__sflush_r+0x46>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	1ac0      	subs	r0, r0, r3
 80047c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c4:	b10b      	cbz	r3, 80047ca <__sflush_r+0x46>
 80047c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	4602      	mov	r2, r0
 80047ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d0:	6a21      	ldr	r1, [r4, #32]
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b0      	blx	r6
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	d106      	bne.n	80047ea <__sflush_r+0x66>
 80047dc:	6829      	ldr	r1, [r5, #0]
 80047de:	291d      	cmp	r1, #29
 80047e0:	d82c      	bhi.n	800483c <__sflush_r+0xb8>
 80047e2:	4a2a      	ldr	r2, [pc, #168]	; (800488c <__sflush_r+0x108>)
 80047e4:	40ca      	lsrs	r2, r1
 80047e6:	07d6      	lsls	r6, r2, #31
 80047e8:	d528      	bpl.n	800483c <__sflush_r+0xb8>
 80047ea:	2200      	movs	r2, #0
 80047ec:	6062      	str	r2, [r4, #4]
 80047ee:	04d9      	lsls	r1, r3, #19
 80047f0:	6922      	ldr	r2, [r4, #16]
 80047f2:	6022      	str	r2, [r4, #0]
 80047f4:	d504      	bpl.n	8004800 <__sflush_r+0x7c>
 80047f6:	1c42      	adds	r2, r0, #1
 80047f8:	d101      	bne.n	80047fe <__sflush_r+0x7a>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	b903      	cbnz	r3, 8004800 <__sflush_r+0x7c>
 80047fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	602f      	str	r7, [r5, #0]
 8004804:	2900      	cmp	r1, #0
 8004806:	d0ca      	beq.n	800479e <__sflush_r+0x1a>
 8004808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800480c:	4299      	cmp	r1, r3
 800480e:	d002      	beq.n	8004816 <__sflush_r+0x92>
 8004810:	4628      	mov	r0, r5
 8004812:	f000 f8fd 	bl	8004a10 <_free_r>
 8004816:	2000      	movs	r0, #0
 8004818:	6360      	str	r0, [r4, #52]	; 0x34
 800481a:	e7c1      	b.n	80047a0 <__sflush_r+0x1c>
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	2301      	movs	r3, #1
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	1c41      	adds	r1, r0, #1
 8004826:	d1c7      	bne.n	80047b8 <__sflush_r+0x34>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0c4      	beq.n	80047b8 <__sflush_r+0x34>
 800482e:	2b1d      	cmp	r3, #29
 8004830:	d001      	beq.n	8004836 <__sflush_r+0xb2>
 8004832:	2b16      	cmp	r3, #22
 8004834:	d101      	bne.n	800483a <__sflush_r+0xb6>
 8004836:	602f      	str	r7, [r5, #0]
 8004838:	e7b1      	b.n	800479e <__sflush_r+0x1a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e7ad      	b.n	80047a0 <__sflush_r+0x1c>
 8004844:	690f      	ldr	r7, [r1, #16]
 8004846:	2f00      	cmp	r7, #0
 8004848:	d0a9      	beq.n	800479e <__sflush_r+0x1a>
 800484a:	0793      	lsls	r3, r2, #30
 800484c:	680e      	ldr	r6, [r1, #0]
 800484e:	bf08      	it	eq
 8004850:	694b      	ldreq	r3, [r1, #20]
 8004852:	600f      	str	r7, [r1, #0]
 8004854:	bf18      	it	ne
 8004856:	2300      	movne	r3, #0
 8004858:	eba6 0807 	sub.w	r8, r6, r7
 800485c:	608b      	str	r3, [r1, #8]
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	dd9c      	ble.n	800479e <__sflush_r+0x1a>
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004868:	4643      	mov	r3, r8
 800486a:	463a      	mov	r2, r7
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	2800      	cmp	r0, #0
 8004872:	dc06      	bgt.n	8004882 <__sflush_r+0xfe>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e78e      	b.n	80047a0 <__sflush_r+0x1c>
 8004882:	4407      	add	r7, r0
 8004884:	eba8 0800 	sub.w	r8, r8, r0
 8004888:	e7e9      	b.n	800485e <__sflush_r+0xda>
 800488a:	bf00      	nop
 800488c:	20400001 	.word	0x20400001

08004890 <_fflush_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	b913      	cbnz	r3, 80048a0 <_fflush_r+0x10>
 800489a:	2500      	movs	r5, #0
 800489c:	4628      	mov	r0, r5
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	b118      	cbz	r0, 80048aa <_fflush_r+0x1a>
 80048a2:	6983      	ldr	r3, [r0, #24]
 80048a4:	b90b      	cbnz	r3, 80048aa <_fflush_r+0x1a>
 80048a6:	f7ff fa15 	bl	8003cd4 <__sinit>
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <_fflush_r+0x6c>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	d11b      	bne.n	80048e8 <_fflush_r+0x58>
 80048b0:	686c      	ldr	r4, [r5, #4]
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ef      	beq.n	800489a <_fflush_r+0xa>
 80048ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048bc:	07d0      	lsls	r0, r2, #31
 80048be:	d404      	bmi.n	80048ca <_fflush_r+0x3a>
 80048c0:	0599      	lsls	r1, r3, #22
 80048c2:	d402      	bmi.n	80048ca <_fflush_r+0x3a>
 80048c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c6:	f7ff faa3 	bl	8003e10 <__retarget_lock_acquire_recursive>
 80048ca:	4628      	mov	r0, r5
 80048cc:	4621      	mov	r1, r4
 80048ce:	f7ff ff59 	bl	8004784 <__sflush_r>
 80048d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d4:	07da      	lsls	r2, r3, #31
 80048d6:	4605      	mov	r5, r0
 80048d8:	d4e0      	bmi.n	800489c <_fflush_r+0xc>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	059b      	lsls	r3, r3, #22
 80048de:	d4dd      	bmi.n	800489c <_fflush_r+0xc>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f7ff fa96 	bl	8003e12 <__retarget_lock_release_recursive>
 80048e6:	e7d9      	b.n	800489c <_fflush_r+0xc>
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <_fflush_r+0x70>)
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d101      	bne.n	80048f2 <_fflush_r+0x62>
 80048ee:	68ac      	ldr	r4, [r5, #8]
 80048f0:	e7df      	b.n	80048b2 <_fflush_r+0x22>
 80048f2:	4b04      	ldr	r3, [pc, #16]	; (8004904 <_fflush_r+0x74>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	bf08      	it	eq
 80048f8:	68ec      	ldreq	r4, [r5, #12]
 80048fa:	e7da      	b.n	80048b2 <_fflush_r+0x22>
 80048fc:	08004b74 	.word	0x08004b74
 8004900:	08004b94 	.word	0x08004b94
 8004904:	08004b54 	.word	0x08004b54

08004908 <_lseek_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_lseek_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fa0c 	bl	8000d34 <_lseek>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_lseek_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_lseek_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000174 	.word	0x20000174

0800492c <__swhatbuf_r>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	460e      	mov	r6, r1
 8004930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004934:	2900      	cmp	r1, #0
 8004936:	b096      	sub	sp, #88	; 0x58
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	da08      	bge.n	8004950 <__swhatbuf_r+0x24>
 800493e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	061a      	lsls	r2, r3, #24
 8004948:	d410      	bmi.n	800496c <__swhatbuf_r+0x40>
 800494a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494e:	e00e      	b.n	800496e <__swhatbuf_r+0x42>
 8004950:	466a      	mov	r2, sp
 8004952:	f000 f8bb 	bl	8004acc <_fstat_r>
 8004956:	2800      	cmp	r0, #0
 8004958:	dbf1      	blt.n	800493e <__swhatbuf_r+0x12>
 800495a:	9a01      	ldr	r2, [sp, #4]
 800495c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004960:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004964:	425a      	negs	r2, r3
 8004966:	415a      	adcs	r2, r3
 8004968:	602a      	str	r2, [r5, #0]
 800496a:	e7ee      	b.n	800494a <__swhatbuf_r+0x1e>
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	2000      	movs	r0, #0
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	b016      	add	sp, #88	; 0x58
 8004974:	bd70      	pop	{r4, r5, r6, pc}
	...

08004978 <__smakebuf_r>:
 8004978:	898b      	ldrh	r3, [r1, #12]
 800497a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800497c:	079d      	lsls	r5, r3, #30
 800497e:	4606      	mov	r6, r0
 8004980:	460c      	mov	r4, r1
 8004982:	d507      	bpl.n	8004994 <__smakebuf_r+0x1c>
 8004984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	2301      	movs	r3, #1
 800498e:	6163      	str	r3, [r4, #20]
 8004990:	b002      	add	sp, #8
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	ab01      	add	r3, sp, #4
 8004996:	466a      	mov	r2, sp
 8004998:	f7ff ffc8 	bl	800492c <__swhatbuf_r>
 800499c:	9900      	ldr	r1, [sp, #0]
 800499e:	4605      	mov	r5, r0
 80049a0:	4630      	mov	r0, r6
 80049a2:	f7ff fa57 	bl	8003e54 <_malloc_r>
 80049a6:	b948      	cbnz	r0, 80049bc <__smakebuf_r+0x44>
 80049a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ac:	059a      	lsls	r2, r3, #22
 80049ae:	d4ef      	bmi.n	8004990 <__smakebuf_r+0x18>
 80049b0:	f023 0303 	bic.w	r3, r3, #3
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	e7e3      	b.n	8004984 <__smakebuf_r+0xc>
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <__smakebuf_r+0x7c>)
 80049be:	62b3      	str	r3, [r6, #40]	; 0x28
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	6020      	str	r0, [r4, #0]
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	9b00      	ldr	r3, [sp, #0]
 80049cc:	6163      	str	r3, [r4, #20]
 80049ce:	9b01      	ldr	r3, [sp, #4]
 80049d0:	6120      	str	r0, [r4, #16]
 80049d2:	b15b      	cbz	r3, 80049ec <__smakebuf_r+0x74>
 80049d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 f889 	bl	8004af0 <_isatty_r>
 80049de:	b128      	cbz	r0, 80049ec <__smakebuf_r+0x74>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	89a0      	ldrh	r0, [r4, #12]
 80049ee:	4305      	orrs	r5, r0
 80049f0:	81a5      	strh	r5, [r4, #12]
 80049f2:	e7cd      	b.n	8004990 <__smakebuf_r+0x18>
 80049f4:	08003c6d 	.word	0x08003c6d

080049f8 <__malloc_lock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_lock+0x8>)
 80049fa:	f7ff ba09 	b.w	8003e10 <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	20000168 	.word	0x20000168

08004a04 <__malloc_unlock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__malloc_unlock+0x8>)
 8004a06:	f7ff ba04 	b.w	8003e12 <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	20000168 	.word	0x20000168

08004a10 <_free_r>:
 8004a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a12:	2900      	cmp	r1, #0
 8004a14:	d044      	beq.n	8004aa0 <_free_r+0x90>
 8004a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1a:	9001      	str	r0, [sp, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8004a22:	bfb8      	it	lt
 8004a24:	18e4      	addlt	r4, r4, r3
 8004a26:	f7ff ffe7 	bl	80049f8 <__malloc_lock>
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <_free_r+0x94>)
 8004a2c:	9801      	ldr	r0, [sp, #4]
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	b933      	cbnz	r3, 8004a40 <_free_r+0x30>
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	6014      	str	r4, [r2, #0]
 8004a36:	b003      	add	sp, #12
 8004a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a3c:	f7ff bfe2 	b.w	8004a04 <__malloc_unlock>
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d908      	bls.n	8004a56 <_free_r+0x46>
 8004a44:	6825      	ldr	r5, [r4, #0]
 8004a46:	1961      	adds	r1, r4, r5
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	bf01      	itttt	eq
 8004a4c:	6819      	ldreq	r1, [r3, #0]
 8004a4e:	685b      	ldreq	r3, [r3, #4]
 8004a50:	1949      	addeq	r1, r1, r5
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	e7ed      	b.n	8004a32 <_free_r+0x22>
 8004a56:	461a      	mov	r2, r3
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b10b      	cbz	r3, 8004a60 <_free_r+0x50>
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d9fa      	bls.n	8004a56 <_free_r+0x46>
 8004a60:	6811      	ldr	r1, [r2, #0]
 8004a62:	1855      	adds	r5, r2, r1
 8004a64:	42a5      	cmp	r5, r4
 8004a66:	d10b      	bne.n	8004a80 <_free_r+0x70>
 8004a68:	6824      	ldr	r4, [r4, #0]
 8004a6a:	4421      	add	r1, r4
 8004a6c:	1854      	adds	r4, r2, r1
 8004a6e:	42a3      	cmp	r3, r4
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	d1e0      	bne.n	8004a36 <_free_r+0x26>
 8004a74:	681c      	ldr	r4, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	6053      	str	r3, [r2, #4]
 8004a7a:	4421      	add	r1, r4
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	e7da      	b.n	8004a36 <_free_r+0x26>
 8004a80:	d902      	bls.n	8004a88 <_free_r+0x78>
 8004a82:	230c      	movs	r3, #12
 8004a84:	6003      	str	r3, [r0, #0]
 8004a86:	e7d6      	b.n	8004a36 <_free_r+0x26>
 8004a88:	6825      	ldr	r5, [r4, #0]
 8004a8a:	1961      	adds	r1, r4, r5
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf04      	itt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	bf04      	itt	eq
 8004a98:	1949      	addeq	r1, r1, r5
 8004a9a:	6021      	streq	r1, [r4, #0]
 8004a9c:	6054      	str	r4, [r2, #4]
 8004a9e:	e7ca      	b.n	8004a36 <_free_r+0x26>
 8004aa0:	b003      	add	sp, #12
 8004aa2:	bd30      	pop	{r4, r5, pc}
 8004aa4:	2000016c 	.word	0x2000016c

08004aa8 <_read_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d07      	ldr	r5, [pc, #28]	; (8004ac8 <_read_r+0x20>)
 8004aac:	4604      	mov	r4, r0
 8004aae:	4608      	mov	r0, r1
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	602a      	str	r2, [r5, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fc f8dc 	bl	8000c74 <_read>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_read_r+0x1e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_read_r+0x1e>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20000174 	.word	0x20000174

08004acc <_fstat_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	; (8004aec <_fstat_r+0x20>)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	f7fc f910 	bl	8000cfe <_fstat>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d102      	bne.n	8004ae8 <_fstat_r+0x1c>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	b103      	cbz	r3, 8004ae8 <_fstat_r+0x1c>
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	bf00      	nop
 8004aec:	20000174 	.word	0x20000174

08004af0 <_isatty_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d06      	ldr	r5, [pc, #24]	; (8004b0c <_isatty_r+0x1c>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fc f90f 	bl	8000d1e <_isatty>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_isatty_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_isatty_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	20000174 	.word	0x20000174

08004b10 <_init>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr

08004b1c <_fini>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr
